/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`chat_controller_create_chat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatControllerCreateChatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_controller_create_open_ai_chat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatControllerCreateOpenAiChatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_controller_delete_chat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatControllerDeleteChatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_controller_get_chat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatControllerGetChatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_controller_list_chats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatControllerListChatsError {
    UnknownValue(serde_json::Value),
}


/// Creates a new chat. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive.
pub async fn chat_controller_create_chat(configuration: &configuration::Configuration, create_chat_dto: models::CreateChatDto) -> Result<models::ChatControllerCreateChat200Response, Error<ChatControllerCreateChatError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_create_chat_dto = create_chat_dto;

    let uri_str = format!("{}/chat", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_chat_dto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ChatControllerCreateChat200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ChatControllerCreateChat200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ChatControllerCreateChatError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn chat_controller_create_open_ai_chat(configuration: &configuration::Configuration, open_ai_responses_request: models::OpenAiResponsesRequest) -> Result<models::ChatControllerCreateOpenAiChat200Response, Error<ChatControllerCreateOpenAiChatError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_open_ai_responses_request = open_ai_responses_request;

    let uri_str = format!("{}/chat/responses", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_open_ai_responses_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ChatControllerCreateOpenAiChat200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ChatControllerCreateOpenAiChat200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ChatControllerCreateOpenAiChatError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn chat_controller_delete_chat(configuration: &configuration::Configuration, id: &str) -> Result<models::Chat, Error<ChatControllerDeleteChatError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/chat/{id}", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Chat`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Chat`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ChatControllerDeleteChatError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn chat_controller_get_chat(configuration: &configuration::Configuration, id: &str) -> Result<models::Chat, Error<ChatControllerGetChatError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/chat/{id}", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Chat`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Chat`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ChatControllerGetChatError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn chat_controller_list_chats(configuration: &configuration::Configuration, assistant_id: Option<&str>, workflow_id: Option<&str>, session_id: Option<&str>, page: Option<f64>, sort_order: Option<&str>, limit: Option<f64>, created_at_gt: Option<String>, created_at_lt: Option<String>, created_at_ge: Option<String>, created_at_le: Option<String>, updated_at_gt: Option<String>, updated_at_lt: Option<String>, updated_at_ge: Option<String>, updated_at_le: Option<String>) -> Result<models::ChatPaginatedResponse, Error<ChatControllerListChatsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_assistant_id = assistant_id;
    let p_workflow_id = workflow_id;
    let p_session_id = session_id;
    let p_page = page;
    let p_sort_order = sort_order;
    let p_limit = limit;
    let p_created_at_gt = created_at_gt;
    let p_created_at_lt = created_at_lt;
    let p_created_at_ge = created_at_ge;
    let p_created_at_le = created_at_le;
    let p_updated_at_gt = updated_at_gt;
    let p_updated_at_lt = updated_at_lt;
    let p_updated_at_ge = updated_at_ge;
    let p_updated_at_le = updated_at_le;

    let uri_str = format!("{}/chat", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_assistant_id {
        req_builder = req_builder.query(&[("assistantId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_workflow_id {
        req_builder = req_builder.query(&[("workflowId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_session_id {
        req_builder = req_builder.query(&[("sessionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_gt {
        req_builder = req_builder.query(&[("createdAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_lt {
        req_builder = req_builder.query(&[("createdAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_ge {
        req_builder = req_builder.query(&[("createdAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_le {
        req_builder = req_builder.query(&[("createdAtLe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_gt {
        req_builder = req_builder.query(&[("updatedAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_lt {
        req_builder = req_builder.query(&[("updatedAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_ge {
        req_builder = req_builder.query(&[("updatedAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_le {
        req_builder = req_builder.query(&[("updatedAtLe", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ChatPaginatedResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ChatPaginatedResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ChatControllerListChatsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

