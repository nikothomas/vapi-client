/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`test_suite_runs_test_suite_run_controller_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunsTestSuiteRunControllerCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_runs_test_suite_run_controller_find_all_paginated`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunsTestSuiteRunControllerFindAllPaginatedError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_runs_test_suite_run_controller_find_one`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunsTestSuiteRunControllerFindOneError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_runs_test_suite_run_controller_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunsTestSuiteRunControllerRemoveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_runs_test_suite_run_controller_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunsTestSuiteRunControllerUpdateError {
    UnknownValue(serde_json::Value),
}


pub async fn test_suite_runs_test_suite_run_controller_create(configuration: &configuration::Configuration, test_suite_id: &str, test_suite_runs_test_suite_run_controller_create_request: models::TestSuiteRunsTestSuiteRunControllerCreateRequest) -> Result<models::TestSuiteRun, Error<TestSuiteRunsTestSuiteRunControllerCreateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_test_suite_runs_test_suite_run_controller_create_request = test_suite_runs_test_suite_run_controller_create_request;

    let uri_str = format!("{}/test-suite/{testSuiteId}/run", configuration.base_path, testSuiteId=crate::apis::urlencode(p_test_suite_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_test_suite_runs_test_suite_run_controller_create_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunsTestSuiteRunControllerCreateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn test_suite_runs_test_suite_run_controller_find_all_paginated(configuration: &configuration::Configuration, test_suite_id: &str, page: Option<f64>, sort_order: Option<models::TestSuiteRunControllerFindAllPaginatedRequestSortOrder>, limit: Option<f64>, created_at_gt: Option<String>, created_at_lt: Option<String>, created_at_ge: Option<String>, created_at_le: Option<String>, updated_at_gt: Option<String>, updated_at_lt: Option<String>, updated_at_ge: Option<String>, updated_at_le: Option<String>) -> Result<models::TestSuiteRunsPaginatedResponse, Error<TestSuiteRunsTestSuiteRunControllerFindAllPaginatedError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_page = page;
    let p_sort_order = sort_order;
    let p_limit = limit;
    let p_created_at_gt = created_at_gt;
    let p_created_at_lt = created_at_lt;
    let p_created_at_ge = created_at_ge;
    let p_created_at_le = created_at_le;
    let p_updated_at_gt = updated_at_gt;
    let p_updated_at_lt = updated_at_lt;
    let p_updated_at_ge = updated_at_ge;
    let p_updated_at_le = updated_at_le;

    let uri_str = format!("{}/test-suite/{testSuiteId}/run", configuration.base_path, testSuiteId=crate::apis::urlencode(p_test_suite_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_gt {
        req_builder = req_builder.query(&[("createdAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_lt {
        req_builder = req_builder.query(&[("createdAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_ge {
        req_builder = req_builder.query(&[("createdAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_le {
        req_builder = req_builder.query(&[("createdAtLe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_gt {
        req_builder = req_builder.query(&[("updatedAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_lt {
        req_builder = req_builder.query(&[("updatedAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_ge {
        req_builder = req_builder.query(&[("updatedAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_le {
        req_builder = req_builder.query(&[("updatedAtLe", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRunsPaginatedResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRunsPaginatedResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunsTestSuiteRunControllerFindAllPaginatedError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn test_suite_runs_test_suite_run_controller_find_one(configuration: &configuration::Configuration, test_suite_id: &str, id: &str) -> Result<models::TestSuiteRun, Error<TestSuiteRunsTestSuiteRunControllerFindOneError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_id = id;

    let uri_str = format!("{}/test-suite/{testSuiteId}/run/{id}", configuration.base_path, testSuiteId=crate::apis::urlencode(p_test_suite_id), id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunsTestSuiteRunControllerFindOneError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn test_suite_runs_test_suite_run_controller_remove(configuration: &configuration::Configuration, test_suite_id: &str, id: &str) -> Result<models::TestSuiteRun, Error<TestSuiteRunsTestSuiteRunControllerRemoveError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_id = id;

    let uri_str = format!("{}/test-suite/{testSuiteId}/run/{id}", configuration.base_path, testSuiteId=crate::apis::urlencode(p_test_suite_id), id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunsTestSuiteRunControllerRemoveError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn test_suite_runs_test_suite_run_controller_update(configuration: &configuration::Configuration, test_suite_id: &str, id: &str, test_suite_runs_test_suite_run_controller_create_request: models::TestSuiteRunsTestSuiteRunControllerCreateRequest) -> Result<models::TestSuiteRun, Error<TestSuiteRunsTestSuiteRunControllerUpdateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_id = id;
    let p_test_suite_runs_test_suite_run_controller_create_request = test_suite_runs_test_suite_run_controller_create_request;

    let uri_str = format!("{}/test-suite/{testSuiteId}/run/{id}", configuration.base_path, testSuiteId=crate::apis::urlencode(p_test_suite_id), id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_test_suite_runs_test_suite_run_controller_create_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunsTestSuiteRunControllerUpdateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

