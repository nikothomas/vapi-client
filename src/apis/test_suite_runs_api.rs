/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`test_suite_run_controller_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunControllerCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_run_controller_find_all_paginated`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunControllerFindAllPaginatedError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_run_controller_find_one`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunControllerFindOneError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_run_controller_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunControllerRemoveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_suite_run_controller_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestSuiteRunControllerUpdateError {
    UnknownValue(serde_json::Value),
}

pub async fn test_suite_run_controller_create(
    configuration: &configuration::Configuration,
    test_suite_id: &str,
    create_test_suite_run_dto: models::CreateTestSuiteRunDto,
) -> Result<models::TestSuiteRun, Error<TestSuiteRunControllerCreateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_create_test_suite_run_dto = create_test_suite_run_dto;

    let uri_str = format!(
        "{}/test-suite/{testSuiteId}/run",
        configuration.base_path,
        testSuiteId = crate::apis::urlencode(p_test_suite_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_test_suite_run_dto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunControllerCreateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn test_suite_run_controller_find_all_paginated(
    configuration: &configuration::Configuration,
    test_suite_id: &str,
    page: Option<f64>,
    sort_order: Option<&str>,
    limit: Option<f64>,
    created_at_gt: Option<String>,
    created_at_lt: Option<String>,
    created_at_ge: Option<String>,
    created_at_le: Option<String>,
    updated_at_gt: Option<String>,
    updated_at_lt: Option<String>,
    updated_at_ge: Option<String>,
    updated_at_le: Option<String>,
) -> Result<
    models::TestSuiteRunsPaginatedResponse,
    Error<TestSuiteRunControllerFindAllPaginatedError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_page = page;
    let p_sort_order = sort_order;
    let p_limit = limit;
    let p_created_at_gt = created_at_gt;
    let p_created_at_lt = created_at_lt;
    let p_created_at_ge = created_at_ge;
    let p_created_at_le = created_at_le;
    let p_updated_at_gt = updated_at_gt;
    let p_updated_at_lt = updated_at_lt;
    let p_updated_at_ge = updated_at_ge;
    let p_updated_at_le = updated_at_le;

    let uri_str = format!(
        "{}/test-suite/{testSuiteId}/run",
        configuration.base_path,
        testSuiteId = crate::apis::urlencode(p_test_suite_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_gt {
        req_builder = req_builder.query(&[("createdAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_lt {
        req_builder = req_builder.query(&[("createdAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_ge {
        req_builder = req_builder.query(&[("createdAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_le {
        req_builder = req_builder.query(&[("createdAtLe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_gt {
        req_builder = req_builder.query(&[("updatedAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_lt {
        req_builder = req_builder.query(&[("updatedAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_ge {
        req_builder = req_builder.query(&[("updatedAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_le {
        req_builder = req_builder.query(&[("updatedAtLe", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRunsPaginatedResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRunsPaginatedResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunControllerFindAllPaginatedError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn test_suite_run_controller_find_one(
    configuration: &configuration::Configuration,
    test_suite_id: &str,
    id: &str,
) -> Result<models::TestSuiteRun, Error<TestSuiteRunControllerFindOneError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_id = id;

    let uri_str = format!(
        "{}/test-suite/{testSuiteId}/run/{id}",
        configuration.base_path,
        testSuiteId = crate::apis::urlencode(p_test_suite_id),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunControllerFindOneError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn test_suite_run_controller_remove(
    configuration: &configuration::Configuration,
    test_suite_id: &str,
    id: &str,
) -> Result<models::TestSuiteRun, Error<TestSuiteRunControllerRemoveError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_id = id;

    let uri_str = format!(
        "{}/test-suite/{testSuiteId}/run/{id}",
        configuration.base_path,
        testSuiteId = crate::apis::urlencode(p_test_suite_id),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunControllerRemoveError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn test_suite_run_controller_update(
    configuration: &configuration::Configuration,
    test_suite_id: &str,
    id: &str,
    update_test_suite_run_dto: models::UpdateTestSuiteRunDto,
) -> Result<models::TestSuiteRun, Error<TestSuiteRunControllerUpdateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_test_suite_id = test_suite_id;
    let p_id = id;
    let p_update_test_suite_run_dto = update_test_suite_run_dto;

    let uri_str = format!(
        "{}/test-suite/{testSuiteId}/run/{id}",
        configuration.base_path,
        testSuiteId = crate::apis::urlencode(p_test_suite_id),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_test_suite_run_dto);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TestSuiteRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TestSuiteRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestSuiteRunControllerUpdateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
