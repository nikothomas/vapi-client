/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`logging_controller_logs_delete_query`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LoggingControllerLogsDeleteQueryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`logging_controller_logs_query`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LoggingControllerLogsQueryError {
    UnknownValue(serde_json::Value),
}


pub async fn logging_controller_logs_delete_query(configuration: &configuration::Configuration, r#type: Option<&str>, assistant_id: Option<&str>, phone_number_id: Option<&str>, customer_id: Option<&str>, squad_id: Option<&str>, call_id: Option<&str>) -> Result<(), Error<LoggingControllerLogsDeleteQueryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_type = r#type;
    let p_assistant_id = assistant_id;
    let p_phone_number_id = phone_number_id;
    let p_customer_id = customer_id;
    let p_squad_id = squad_id;
    let p_call_id = call_id;

    let uri_str = format!("{}/logs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_assistant_id {
        req_builder = req_builder.query(&[("assistantId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_phone_number_id {
        req_builder = req_builder.query(&[("phoneNumberId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_customer_id {
        req_builder = req_builder.query(&[("customerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squad_id {
        req_builder = req_builder.query(&[("squadId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_call_id {
        req_builder = req_builder.query(&[("callId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<LoggingControllerLogsDeleteQueryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn logging_controller_logs_query(configuration: &configuration::Configuration, r#type: Option<&str>, webhook_type: Option<&str>, assistant_id: Option<&str>, phone_number_id: Option<&str>, customer_id: Option<&str>, squad_id: Option<&str>, call_id: Option<&str>, page: Option<f64>, sort_order: Option<&str>, limit: Option<f64>, created_at_gt: Option<String>, created_at_lt: Option<String>, created_at_ge: Option<String>, created_at_le: Option<String>, updated_at_gt: Option<String>, updated_at_lt: Option<String>, updated_at_ge: Option<String>, updated_at_le: Option<String>) -> Result<models::LogsPaginatedResponse, Error<LoggingControllerLogsQueryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_type = r#type;
    let p_webhook_type = webhook_type;
    let p_assistant_id = assistant_id;
    let p_phone_number_id = phone_number_id;
    let p_customer_id = customer_id;
    let p_squad_id = squad_id;
    let p_call_id = call_id;
    let p_page = page;
    let p_sort_order = sort_order;
    let p_limit = limit;
    let p_created_at_gt = created_at_gt;
    let p_created_at_lt = created_at_lt;
    let p_created_at_ge = created_at_ge;
    let p_created_at_le = created_at_le;
    let p_updated_at_gt = updated_at_gt;
    let p_updated_at_lt = updated_at_lt;
    let p_updated_at_ge = updated_at_ge;
    let p_updated_at_le = updated_at_le;

    let uri_str = format!("{}/logs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_webhook_type {
        req_builder = req_builder.query(&[("webhookType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_assistant_id {
        req_builder = req_builder.query(&[("assistantId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_phone_number_id {
        req_builder = req_builder.query(&[("phoneNumberId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_customer_id {
        req_builder = req_builder.query(&[("customerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squad_id {
        req_builder = req_builder.query(&[("squadId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_call_id {
        req_builder = req_builder.query(&[("callId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort_order {
        req_builder = req_builder.query(&[("sortOrder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_gt {
        req_builder = req_builder.query(&[("createdAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_lt {
        req_builder = req_builder.query(&[("createdAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_ge {
        req_builder = req_builder.query(&[("createdAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_at_le {
        req_builder = req_builder.query(&[("createdAtLe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_gt {
        req_builder = req_builder.query(&[("updatedAtGt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_lt {
        req_builder = req_builder.query(&[("updatedAtLt", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_ge {
        req_builder = req_builder.query(&[("updatedAtGe", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated_at_le {
        req_builder = req_builder.query(&[("updatedAtLe", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::LogsPaginatedResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::LogsPaginatedResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<LoggingControllerLogsQueryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

