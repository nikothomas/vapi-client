/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Chat {
    /// This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.
    #[serde(rename = "assistantId", skip_serializing_if = "Option::is_none")]
    pub assistant_id: Option<String>,
    /// This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.
    #[serde(rename = "assistant", skip_serializing_if = "Option::is_none")]
    pub assistant: Option<models::CreateAssistantDto>,
    /// This is the name of the chat. This is just for your own reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This is the ID of the session that will be used for the chat. Mutually exclusive with previousChatId.
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<models::ChatInput>,
    /// This is a flag that determines whether the response should be streamed. When true, the response will be sent as chunks of text.
    #[serde(rename = "stream", skip_serializing_if = "Option::is_none")]
    pub stream: Option<bool>,
    /// This is the ID of the chat that will be used as context for the new chat. The messages from the previous chat will be used as context. Mutually exclusive with sessionId.
    #[serde(rename = "previousChatId", skip_serializing_if = "Option::is_none")]
    pub previous_chat_id: Option<String>,
    /// This is the unique identifier for the chat.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this chat belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is an array of messages used as context for the chat. Used to provide message history for multi-turn conversations.
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<models::MessageArrayInner>>,
    /// This is the output messages generated by the system in response to the input.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<models::MessageArrayInner>>,
    /// This is the ISO 8601 date-time string of when the chat was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the chat was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// These are the costs of individual components of the chat in USD.
    #[serde(rename = "costs", skip_serializing_if = "Option::is_none")]
    pub costs: Option<Vec<models::ChatCostsInner>>,
    /// This is the cost of the chat in USD.
    #[serde(rename = "cost", skip_serializing_if = "Option::is_none")]
    pub cost: Option<f64>,
}

impl Chat {
    pub fn new(id: String, org_id: String, created_at: String, updated_at: String) -> Chat {
        Chat {
            assistant_id: None,
            assistant: None,
            name: None,
            session_id: None,
            input: None,
            stream: None,
            previous_chat_id: None,
            id,
            org_id,
            messages: None,
            output: None,
            created_at,
            updated_at,
            costs: None,
            cost: None,
        }
    }
}
