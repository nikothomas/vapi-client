/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AnalyticsOperationColumn : This is the columns you want to perform the aggregation operation on.
/// This is the columns you want to perform the aggregation operation on.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalyticsOperationColumn {
    #[serde(rename = "id")]
    Id,
    #[serde(rename = "cost")]
    Cost,
    #[serde(rename = "costBreakdown.llm")]
    CostBreakdownPeriodLlm,
    #[serde(rename = "costBreakdown.stt")]
    CostBreakdownPeriodStt,
    #[serde(rename = "costBreakdown.tts")]
    CostBreakdownPeriodTts,
    #[serde(rename = "costBreakdown.vapi")]
    CostBreakdownPeriodVapi,
    #[serde(rename = "costBreakdown.ttsCharacters")]
    CostBreakdownPeriodTtsCharacters,
    #[serde(rename = "costBreakdown.llmPromptTokens")]
    CostBreakdownPeriodLlmPromptTokens,
    #[serde(rename = "costBreakdown.llmCompletionTokens")]
    CostBreakdownPeriodLlmCompletionTokens,
    #[serde(rename = "duration")]
    Duration,
    #[serde(rename = "concurrency")]
    Concurrency,
    #[serde(rename = "minutesUsed")]
    MinutesUsed,

}

impl std::fmt::Display for AnalyticsOperationColumn {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Id => write!(f, "id"),
            Self::Cost => write!(f, "cost"),
            Self::CostBreakdownPeriodLlm => write!(f, "costBreakdown.llm"),
            Self::CostBreakdownPeriodStt => write!(f, "costBreakdown.stt"),
            Self::CostBreakdownPeriodTts => write!(f, "costBreakdown.tts"),
            Self::CostBreakdownPeriodVapi => write!(f, "costBreakdown.vapi"),
            Self::CostBreakdownPeriodTtsCharacters => write!(f, "costBreakdown.ttsCharacters"),
            Self::CostBreakdownPeriodLlmPromptTokens => write!(f, "costBreakdown.llmPromptTokens"),
            Self::CostBreakdownPeriodLlmCompletionTokens => write!(f, "costBreakdown.llmCompletionTokens"),
            Self::Duration => write!(f, "duration"),
            Self::Concurrency => write!(f, "concurrency"),
            Self::MinutesUsed => write!(f, "minutesUsed"),
        }
    }
}

impl Default for AnalyticsOperationColumn {
    fn default() -> AnalyticsOperationColumn {
        Self::Id
    }
}

