/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KnowledgeBasesListResponseItemOneOf {
    /// This is the name of the knowledge base.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "searchPlan", skip_serializing_if = "Option::is_none")]
    pub search_plan: Option<models::TrieveKnowledgeBaseSearchPlan>,
    #[serde(rename = "createPlan", skip_serializing_if = "Option::is_none")]
    pub create_plan: Option<models::TrieveKnowledgeBaseImport>,
    /// This is the id of the knowledge base.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the org id of the knowledge base.
    #[serde(rename = "orgId")]
    pub org_id: String,
    #[serde(rename = "provider")]
    pub provider: Provider,
}

impl KnowledgeBasesListResponseItemOneOf {
    pub fn new(id: String, org_id: String, provider: Provider) -> KnowledgeBasesListResponseItemOneOf {
        KnowledgeBasesListResponseItemOneOf {
            name: None,
            search_plan: None,
            create_plan: None,
            id,
            org_id,
            provider,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "trieve")]
    Trieve,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Trieve
    }
}

