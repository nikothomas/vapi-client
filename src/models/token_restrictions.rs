/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenRestrictions {
    /// This determines whether the token is enabled or disabled. Default is true, it's enabled.
    #[serde(rename = "enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<Option<bool>>,
    /// This determines the allowed origins for this token. Validates the `Origin` header. Default is any origin.  Only relevant for `public` tokens.
    #[serde(rename = "allowedOrigins", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allowed_origins: Option<Option<Vec<String>>>,
    /// This determines which assistantIds can be used when creating a call. Default is any assistantId.  Only relevant for `public` tokens.
    #[serde(rename = "allowedAssistantIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allowed_assistant_ids: Option<Option<Vec<String>>>,
    /// This determines whether transient assistants can be used when creating a call. Default is true.  If `allowedAssistantIds` is provided, this is automatically false.  Only relevant for `public` tokens.
    #[serde(rename = "allowTransientAssistant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allow_transient_assistant: Option<Option<bool>>,
}

impl TokenRestrictions {
    pub fn new() -> TokenRestrictions {
        TokenRestrictions {
            enabled: None,
            allowed_origins: None,
            allowed_assistant_ids: None,
            allow_transient_assistant: None,
        }
    }
}

