/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Recording {
    /// This is the stereo recording url for the call. To enable, set `assistant.artifactPlan.recordingEnabled`.
    #[serde(rename = "stereoUrl", skip_serializing_if = "Option::is_none")]
    pub stereo_url: Option<String>,
    /// This is the video recording url for the call. To enable, set `assistant.artifactPlan.videoRecordingEnabled`.
    #[serde(rename = "videoUrl", skip_serializing_if = "Option::is_none")]
    pub video_url: Option<String>,
    /// This is video recording start delay in ms. To enable, set `assistant.artifactPlan.videoRecordingEnabled`. This can be used to align the playback of the recording with artifact.messages timestamps.
    #[serde(rename = "videoRecordingStartDelaySeconds", skip_serializing_if = "Option::is_none")]
    pub video_recording_start_delay_seconds: Option<f64>,
    /// This is the mono recording url for the call. To enable, set `assistant.artifactPlan.recordingEnabled`.
    #[serde(rename = "mono", skip_serializing_if = "Option::is_none")]
    pub mono: Option<models::Mono>,
}

impl Recording {
    pub fn new() -> Recording {
        Recording {
            stereo_url: None,
            video_url: None,
            video_recording_start_delay_seconds: None,
            mono: None,
        }
    }
}

