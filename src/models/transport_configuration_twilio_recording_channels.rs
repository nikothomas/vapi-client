/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransportConfigurationTwilioRecordingChannels : The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.  @default 'mono'
/// The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.  @default 'mono'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransportConfigurationTwilioRecordingChannels {
    #[serde(rename = "mono")]
    Mono,
    #[serde(rename = "dual")]
    Dual,

}

impl std::fmt::Display for TransportConfigurationTwilioRecordingChannels {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Mono => write!(f, "mono"),
            Self::Dual => write!(f, "dual"),
        }
    }
}

impl Default for TransportConfigurationTwilioRecordingChannels {
    fn default() -> TransportConfigurationTwilioRecordingChannels {
        Self::Mono
    }
}

