/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Say {
    #[serde(rename = "exact", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub exact: Option<Option<String>>,
    #[serde(rename = "prompt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prompt: Option<Option<String>>,
    #[serde(rename = "name")]
    pub name: String,
    /// This is for metadata you want to store on the task.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
}

impl Say {
    pub fn new(name: String) -> Say {
        Say {
            exact: None,
            prompt: None,
            name,
            metadata: None,
        }
    }
}

