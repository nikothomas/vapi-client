/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VapiVoice {
    /// This is the voice provider that will be used.
    #[serde(rename = "provider")]
    pub provider: Provider,
    /// The voices provided by Vapi
    #[serde(rename = "voiceId")]
    pub voice_id: VoiceId,
    /// This is the plan for chunking the model output before it is sent to the voice provider.
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<Box<models::ChunkPlan>>,
    /// This is the plan for voice provider fallbacks in the event that the primary voice provider fails.
    #[serde(rename = "fallbackPlan", skip_serializing_if = "Option::is_none")]
    pub fallback_plan: Option<Box<models::FallbackPlan>>,
}

impl VapiVoice {
    pub fn new(provider: Provider, voice_id: VoiceId) -> VapiVoice {
        VapiVoice {
            provider,
            voice_id,
            chunk_plan: None,
            fallback_plan: None,
        }
    }
}
/// This is the voice provider that will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "vapi")]
    Vapi,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Vapi
    }
}
/// The voices provided by Vapi
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoiceId {
    #[serde(rename = "Elliot")]
    Elliot,
    #[serde(rename = "Rohan")]
    Rohan,
    #[serde(rename = "Lily")]
    Lily,
    #[serde(rename = "Savannah")]
    Savannah,
    #[serde(rename = "Hana")]
    Hana,
    #[serde(rename = "Neha")]
    Neha,
    #[serde(rename = "Cole")]
    Cole,
    #[serde(rename = "Harry")]
    Harry,
    #[serde(rename = "Paige")]
    Paige,
}

impl Default for VoiceId {
    fn default() -> VoiceId {
        Self::Elliot
    }
}

