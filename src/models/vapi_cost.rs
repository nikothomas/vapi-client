/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VapiCost {
    /// This is the type of cost, always 'vapi' for this class.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the sub type of the cost.
    #[serde(rename = "subType")]
    pub sub_type: SubType,
    /// This is the minutes of Vapi usage. This should match `call.endedAt` - `call.startedAt`.
    #[serde(rename = "minutes")]
    pub minutes: f64,
    /// This is the cost of the component in USD.
    #[serde(rename = "cost")]
    pub cost: f64,
}

impl VapiCost {
    pub fn new(r#type: Type, sub_type: SubType, minutes: f64, cost: f64) -> VapiCost {
        VapiCost {
            r#type,
            sub_type,
            minutes,
            cost,
        }
    }
}
/// This is the type of cost, always 'vapi' for this class.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "vapi")]
    Vapi,
}

impl Default for Type {
    fn default() -> Type {
        Self::Vapi
    }
}
/// This is the sub type of the cost.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubType {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "overage")]
    Overage,
}

impl Default for SubType {
    fn default() -> SubType {
        Self::Normal
    }
}

