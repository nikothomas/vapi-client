/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CartesiaExperimentalControlsEmotion {
    #[serde(rename = "anger:lowest")]
    AngerColonLowest,
    #[serde(rename = "anger:low")]
    AngerColonLow,
    #[serde(rename = "anger:high")]
    AngerColonHigh,
    #[serde(rename = "anger:highest")]
    AngerColonHighest,
    #[serde(rename = "positivity:lowest")]
    PositivityColonLowest,
    #[serde(rename = "positivity:low")]
    PositivityColonLow,
    #[serde(rename = "positivity:high")]
    PositivityColonHigh,
    #[serde(rename = "positivity:highest")]
    PositivityColonHighest,
    #[serde(rename = "surprise:lowest")]
    SurpriseColonLowest,
    #[serde(rename = "surprise:low")]
    SurpriseColonLow,
    #[serde(rename = "surprise:high")]
    SurpriseColonHigh,
    #[serde(rename = "surprise:highest")]
    SurpriseColonHighest,
    #[serde(rename = "sadness:lowest")]
    SadnessColonLowest,
    #[serde(rename = "sadness:low")]
    SadnessColonLow,
    #[serde(rename = "sadness:high")]
    SadnessColonHigh,
    #[serde(rename = "sadness:highest")]
    SadnessColonHighest,
    #[serde(rename = "curiosity:lowest")]
    CuriosityColonLowest,
    #[serde(rename = "curiosity:low")]
    CuriosityColonLow,
    #[serde(rename = "curiosity:high")]
    CuriosityColonHigh,
    #[serde(rename = "curiosity:highest")]
    CuriosityColonHighest,

}

impl std::fmt::Display for CartesiaExperimentalControlsEmotion {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AngerColonLowest => write!(f, "anger:lowest"),
            Self::AngerColonLow => write!(f, "anger:low"),
            Self::AngerColonHigh => write!(f, "anger:high"),
            Self::AngerColonHighest => write!(f, "anger:highest"),
            Self::PositivityColonLowest => write!(f, "positivity:lowest"),
            Self::PositivityColonLow => write!(f, "positivity:low"),
            Self::PositivityColonHigh => write!(f, "positivity:high"),
            Self::PositivityColonHighest => write!(f, "positivity:highest"),
            Self::SurpriseColonLowest => write!(f, "surprise:lowest"),
            Self::SurpriseColonLow => write!(f, "surprise:low"),
            Self::SurpriseColonHigh => write!(f, "surprise:high"),
            Self::SurpriseColonHighest => write!(f, "surprise:highest"),
            Self::SadnessColonLowest => write!(f, "sadness:lowest"),
            Self::SadnessColonLow => write!(f, "sadness:low"),
            Self::SadnessColonHigh => write!(f, "sadness:high"),
            Self::SadnessColonHighest => write!(f, "sadness:highest"),
            Self::CuriosityColonLowest => write!(f, "curiosity:lowest"),
            Self::CuriosityColonLow => write!(f, "curiosity:low"),
            Self::CuriosityColonHigh => write!(f, "curiosity:high"),
            Self::CuriosityColonHighest => write!(f, "curiosity:highest"),
        }
    }
}

impl Default for CartesiaExperimentalControlsEmotion {
    fn default() -> CartesiaExperimentalControlsEmotion {
        Self::AngerColonLowest
    }
}

