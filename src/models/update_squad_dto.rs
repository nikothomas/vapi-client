/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateSquadDto {
    /// This is the name of the squad.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This is the list of assistants that make up the squad.  The call will start with the first assistant in the list.
    #[serde(rename = "members")]
    pub members: Vec<models::SquadMemberDto>,
    /// This can be used to override all the assistants' settings and provide values for their template variables.  Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.
    #[serde(rename = "membersOverrides", skip_serializing_if = "Option::is_none")]
    pub members_overrides: Option<models::AssistantOverrides>,
}

impl UpdateSquadDto {
    pub fn new(members: Vec<models::SquadMemberDto>) -> UpdateSquadDto {
        UpdateSquadDto {
            name: None,
            members,
            members_overrides: None,
        }
    }
}

