/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeveloperMessage {
    /// This is the role of the message author
    #[serde(rename = "role")]
    pub role: RoleTrue,
    /// This is the content of the developer message
    #[serde(rename = "content")]
    pub content: String,
    /// This is an optional name for the participant
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl DeveloperMessage {
    pub fn new(role: RoleTrue, content: String) -> DeveloperMessage {
        DeveloperMessage {
            role,
            content,
            name: None,
        }
    }
}
/// This is the role of the message author
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoleTrue {
    #[serde(rename = "developer")]
    Developer,
}

impl Default for RoleTrue {
    fn default() -> RoleTrue {
        Self::Developer
    }
}

