/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RimeAiVoice {
    #[serde(rename = "voiceId")]
    pub voice_id: models::RimeAiVoiceId,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<models::RimeAiVoiceModel>,
    /// This is the speed multiplier that will be used.
    #[serde(rename = "speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub speed: Option<Option<f64>>,
    /// This is a flag that controls whether to add slight pauses using angle brackets. Example: “Hi. <200> I’d love to have a conversation with you.” adds a 200ms pause between the first and second sentences.
    #[serde(rename = "pauseBetweenBrackets", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pause_between_brackets: Option<Option<bool>>,
    /// This is a flag that controls whether text inside brackets should be phonemized (converted to phonetic pronunciation) - Example: \"{h'El.o} World\" will pronounce \"Hello\" as expected.
    #[serde(rename = "phonemizeBetweenBrackets", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phonemize_between_brackets: Option<Option<bool>>,
    /// This is a flag that controls whether to optimize for reduced latency in streaming. https://docs.rime.ai/api-reference/endpoint/websockets#param-reduce-latency
    #[serde(rename = "reduceLatency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reduce_latency: Option<Option<bool>>,
    /// This is a string that allows inline speed control using alpha notation. https://docs.rime.ai/api-reference/endpoint/websockets#param-inline-speed-alpha
    #[serde(rename = "inlineSpeedAlpha", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inline_speed_alpha: Option<Option<String>>,
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
    #[serde(rename = "fallbackPlan", skip_serializing_if = "Option::is_none")]
    pub fallback_plan: Option<models::FallbackPlan>,
}

impl RimeAiVoice {
    pub fn new(voice_id: models::RimeAiVoiceId) -> RimeAiVoice {
        RimeAiVoice {
            voice_id,
            model: None,
            speed: None,
            pause_between_brackets: None,
            phonemize_between_brackets: None,
            reduce_latency: None,
            inline_speed_alpha: None,
            chunk_plan: None,
            fallback_plan: None,
        }
    }
}

