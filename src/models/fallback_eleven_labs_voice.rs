/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FallbackElevenLabsVoice {
    #[serde(rename = "voiceId")]
    pub voice_id: models::FallbackElevenLabsVoiceId,
    /// Defines the stability for voice settings.
    #[serde(rename = "stability", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stability: Option<Option<f64>>,
    /// Defines the similarity boost for voice settings.
    #[serde(rename = "similarityBoost", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub similarity_boost: Option<Option<f64>>,
    /// Defines the style for voice settings.
    #[serde(rename = "style", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub style: Option<Option<f64>>,
    /// Defines the use speaker boost for voice settings.
    #[serde(rename = "useSpeakerBoost", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub use_speaker_boost: Option<Option<bool>>,
    /// Defines the speed for voice settings.
    #[serde(rename = "speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub speed: Option<Option<f64>>,
    /// Defines the optimize streaming latency for voice settings. Defaults to 3.
    #[serde(rename = "optimizeStreamingLatency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub optimize_streaming_latency: Option<Option<f64>>,
    /// This enables the use of https://elevenlabs.io/docs/speech-synthesis/prompting#pronunciation. Defaults to false to save latency.  @default false
    #[serde(rename = "enableSsmlParsing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_ssml_parsing: Option<Option<bool>>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<models::FallbackElevenLabsVoiceModel>,
    /// This is the language (ISO 639-1) that is enforced for the model. Currently only Turbo v2.5 supports language enforcement. For other models, an error will be returned if language code is provided.
    #[serde(rename = "language", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub language: Option<Option<String>>,
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
}

impl FallbackElevenLabsVoice {
    pub fn new(voice_id: models::FallbackElevenLabsVoiceId) -> FallbackElevenLabsVoice {
        FallbackElevenLabsVoice {
            voice_id,
            stability: None,
            similarity_boost: None,
            style: None,
            use_speaker_boost: None,
            speed: None,
            optimize_streaming_latency: None,
            enable_ssml_parsing: None,
            model: None,
            language: None,
            chunk_plan: None,
        }
    }
}

