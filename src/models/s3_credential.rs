/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::ToSchema;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
pub struct S3Credential {
    /// Credential provider. Only allowed value is s3
    #[serde(rename = "provider")]
    pub provider: Provider,
    /// AWS access key ID.
    #[serde(rename = "awsAccessKeyId")]
    pub aws_access_key_id: String,
    /// AWS access key secret. This is not returned in the API.
    #[serde(rename = "awsSecretAccessKey")]
    pub aws_secret_access_key: String,
    /// AWS region in which the S3 bucket is located.
    #[serde(rename = "region")]
    pub region: String,
    /// AWS S3 bucket name.
    #[serde(rename = "s3BucketName")]
    pub s3_bucket_name: String,
    /// The path prefix for the uploaded recording. Ex. \"recordings/\"
    #[serde(rename = "s3PathPrefix")]
    pub s3_path_prefix: String,
    /// This is the unique identifier for the credential.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this credential belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is the ISO 8601 date-time string of when the credential was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the assistant was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// This is the name of credential. This is just for your reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl S3Credential {
    pub fn new(
        provider: Provider,
        aws_access_key_id: String,
        aws_secret_access_key: String,
        region: String,
        s3_bucket_name: String,
        s3_path_prefix: String,
        id: String,
        org_id: String,
        created_at: String,
        updated_at: String,
    ) -> S3Credential {
        S3Credential {
            provider,
            aws_access_key_id,
            aws_secret_access_key,
            region,
            s3_bucket_name,
            s3_path_prefix,
            id,
            org_id,
            created_at,
            updated_at,
            name: None,
        }
    }
}
/// Credential provider. Only allowed value is s3
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Provider {
    #[serde(rename = "s3")]
    S3,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::S3
    }
}
