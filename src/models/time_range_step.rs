/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TimeRangeStep : This is the time step for aggregations.  If not provided, defaults to returning for the entire time range.
/// This is the time step for aggregations.  If not provided, defaults to returning for the entire time range.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeRangeStep {
    #[serde(rename = "second")]
    Second,
    #[serde(rename = "minute")]
    Minute,
    #[serde(rename = "hour")]
    Hour,
    #[serde(rename = "day")]
    Day,
    #[serde(rename = "week")]
    Week,
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "quarter")]
    Quarter,
    #[serde(rename = "year")]
    Year,
    #[serde(rename = "decade")]
    Decade,
    #[serde(rename = "century")]
    Century,
    #[serde(rename = "millennium")]
    Millennium,

}

impl std::fmt::Display for TimeRangeStep {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Second => write!(f, "second"),
            Self::Minute => write!(f, "minute"),
            Self::Hour => write!(f, "hour"),
            Self::Day => write!(f, "day"),
            Self::Week => write!(f, "week"),
            Self::Month => write!(f, "month"),
            Self::Quarter => write!(f, "quarter"),
            Self::Year => write!(f, "year"),
            Self::Decade => write!(f, "decade"),
            Self::Century => write!(f, "century"),
            Self::Millennium => write!(f, "millennium"),
        }
    }
}

impl Default for TimeRangeStep {
    fn default() -> TimeRangeStep {
        Self::Second
    }
}

