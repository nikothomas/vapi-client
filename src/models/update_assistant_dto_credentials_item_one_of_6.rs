/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateAssistantDtoCredentialsItemOneOf6 {
    /// This is the list of SIP trunk's gateways.
    #[serde(rename = "gateways")]
    pub gateways: Vec<models::SipTrunkGateway>,
    #[serde(rename = "outboundAuthenticationPlan", skip_serializing_if = "Option::is_none")]
    pub outbound_authentication_plan: Option<models::SipTrunkOutboundAuthenticationPlan>,
    /// This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior.  Usage: - Vonage/Twilio requires leading plus for all outbound calls. Set this to true.  @default false
    #[serde(rename = "outboundLeadingPlusEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub outbound_leading_plus_enabled: Option<Option<bool>>,
    /// This can be used to configure the tech prefix on outbound calls. This is an advanced property.
    #[serde(rename = "techPrefix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tech_prefix: Option<Option<String>>,
    /// This can be used to enable the SIP diversion header for authenticating the calling number if the SIP trunk supports it. This is an advanced property.
    #[serde(rename = "sipDiversionHeader", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sip_diversion_header: Option<Option<String>>,
    #[serde(rename = "sbcConfiguration", skip_serializing_if = "Option::is_none")]
    pub sbc_configuration: Option<serde_json::Value>,
    /// This is the name of credential. This is just for your reference.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "provider")]
    pub provider: Provider,
}

impl UpdateAssistantDtoCredentialsItemOneOf6 {
    pub fn new(gateways: Vec<models::SipTrunkGateway>, provider: Provider) -> UpdateAssistantDtoCredentialsItemOneOf6 {
        UpdateAssistantDtoCredentialsItemOneOf6 {
            gateways,
            outbound_authentication_plan: None,
            outbound_leading_plus_enabled: None,
            tech_prefix: None,
            sip_diversion_header: None,
            sbc_configuration: None,
            name: None,
            provider,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "byo-sip-trunk")]
    ByoSipTrunk,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::ByoSipTrunk
    }
}

