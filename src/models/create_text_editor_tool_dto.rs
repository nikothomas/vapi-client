/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTextEditorToolDto {
    /// These are the messages that will be spoken to the user as the tool is running.  For some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<models::CreateDtmfToolDtoMessagesInner>>,
    /// The type of tool. \"textEditor\" for Text Editor tool.
    #[serde(rename = "type")]
    pub r#type: TypeTrue,
    /// The sub type of tool.
    #[serde(rename = "subType")]
    pub sub_type: SubTypeTrue,
    ///    This is the server where a `tool-calls` webhook will be sent.    Notes:   - Webhook is sent to this server when a tool call is made.   - Webhook contains the call, assistant, and phone number objects.   - Webhook contains the variables set on the assistant.   - Webhook is sent to the first available URL in this order: {{tool.server.url}}, {{assistant.server.url}}, {{phoneNumber.server.url}}, {{org.server.url}}.   - Webhook expects a response with tool call result.
    #[serde(rename = "server", skip_serializing_if = "Option::is_none")]
    pub server: Option<models::Server>,
    /// The name of the tool, fixed to 'str_replace_editor'
    #[serde(rename = "name")]
    pub name: NameTrue,
    /// This is the function definition of the tool.  For `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.  An example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.
    #[serde(rename = "function", skip_serializing_if = "Option::is_none")]
    pub function: Option<models::OpenAiFunction>,
}

impl CreateTextEditorToolDto {
    pub fn new(r#type: TypeTrue, sub_type: SubTypeTrue, name: NameTrue) -> CreateTextEditorToolDto {
        CreateTextEditorToolDto {
            messages: None,
            r#type,
            sub_type,
            server: None,
            name,
            function: None,
        }
    }
}
/// The type of tool. \"textEditor\" for Text Editor tool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeTrue {
    #[serde(rename = "textEditor")]
    TextEditor,
}

impl Default for TypeTrue {
    fn default() -> TypeTrue {
        Self::TextEditor
    }
}
/// The sub type of tool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubTypeTrue {
    #[serde(rename = "text_editor_20241022")]
    TextEditor20241022,
}

impl Default for SubTypeTrue {
    fn default() -> SubTypeTrue {
        Self::TextEditor20241022
    }
}
/// The name of the tool, fixed to 'str_replace_editor'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NameTrue {
    #[serde(rename = "str_replace_editor")]
    StrReplaceEditor,
}

impl Default for NameTrue {
    fn default() -> NameTrue {
        Self::StrReplaceEditor
    }
}
