/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KnowledgeBaseCost {
    /// This is the model that was used to perform the knowledge-base lookup.
    #[serde(rename = "model")]
    pub model: std::collections::HashMap<String, serde_json::Value>,

    /// This is the number of prompt tokens used for knowledge-base.
    #[serde(rename = "promptTokens")]
    pub prompt_tokens: f64,

    /// This is the number of completion tokens returned from knowledge-base.
    #[serde(rename = "completionTokens")]
    pub completion_tokens: f64,

    /// This is the cost of the knowledge-base component in USD.
    #[serde(rename = "cost")]
    pub cost: f64,

    #[serde(rename = "type")]
    pub r#type: Type,
}

impl KnowledgeBaseCost {
    pub fn new(
        model: std::collections::HashMap<String, serde_json::Value>,
        prompt_tokens: f64,
        completion_tokens: f64,
        cost: f64,
        r#type: Type,
    ) -> KnowledgeBaseCost {
        KnowledgeBaseCost {
            model,
            prompt_tokens,
            completion_tokens,
            cost,
            r#type,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "knowledge-base")]
    KnowledgeBase,
}

impl Default for Type {
    fn default() -> Type {
        Self::KnowledgeBase
    }
}
