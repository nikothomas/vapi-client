/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KnowledgeBaseCost {
    /// This is the type of cost, always 'knowledge-base' for this class.
    #[serde(rename = "type")]
    pub r#type: TypeTrue,
    /// This is the model that was used for processing the knowledge base.
    #[serde(rename = "model")]
    pub model: serde_json::Value,
    /// This is the number of prompt tokens used in the knowledge base query.
    #[serde(rename = "promptTokens")]
    pub prompt_tokens: f64,
    /// This is the number of completion tokens generated in the knowledge base query.
    #[serde(rename = "completionTokens")]
    pub completion_tokens: f64,
    /// This is the cost of the component in USD.
    #[serde(rename = "cost")]
    pub cost: f64,
}

impl KnowledgeBaseCost {
    pub fn new(
        r#type: TypeTrue,
        model: serde_json::Value,
        prompt_tokens: f64,
        completion_tokens: f64,
        cost: f64,
    ) -> KnowledgeBaseCost {
        KnowledgeBaseCost {
            r#type,
            model,
            prompt_tokens,
            completion_tokens,
            cost,
        }
    }
}
/// This is the type of cost, always 'knowledge-base' for this class.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeTrue {
    #[serde(rename = "knowledge-base")]
    KnowledgeBase,
}

impl Default for TypeTrue {
    fn default() -> TypeTrue {
        Self::KnowledgeBase
    }
}
