/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::ToSchema;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
pub struct RuleBasedCondition {
    /// This condition is based on a strict rule.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the operator you want to use to compare the left side and right side.  The operation becomes `(leftSide) operator (rightSide)`.
    #[serde(rename = "operator")]
    pub operator: Operator,
    /// This is the left side of the operation.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow; read caveat #1) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow; read caveat #1) - \"{{your-block-name.output.your-property-name}}\" for another block's output (in the same workflow; read caveat #2) - \"{{your-block-name.input.your-property-name}}\" for another block's input (in the same workflow; read caveat #2) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  Caveats: 1. a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.input/output.propertyName}} will reference the latest usage of the step. 2. a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.input/output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.
    #[serde(rename = "leftSide")]
    pub left_side: String,
    /// This is the right side of the operation.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow; read caveat #1) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow; read caveat #1) - \"{{your-block-name.output.your-property-name}}\" for another block's output (in the same workflow; read caveat #2) - \"{{your-block-name.input.your-property-name}}\" for another block's input (in the same workflow; read caveat #2) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  Caveats: 1. a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.input/output.propertyName}} will reference the latest usage of the step. 2. a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.input/output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.
    #[serde(rename = "rightSide")]
    pub right_side: String,
}

impl RuleBasedCondition {
    pub fn new(
        r#type: Type,
        operator: Operator,
        left_side: String,
        right_side: String,
    ) -> RuleBasedCondition {
        RuleBasedCondition {
            r#type,
            operator,
            left_side,
            right_side,
        }
    }
}
/// This condition is based on a strict rule.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Type {
    #[serde(rename = "rule-based")]
    RuleBased,
}

impl Default for Type {
    fn default() -> Type {
        Self::RuleBased
    }
}
/// This is the operator you want to use to compare the left side and right side.  The operation becomes `(leftSide) operator (rightSide)`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Operator {
    #[serde(rename = "eq")]
    Eq,
    #[serde(rename = "neq")]
    Neq,
    #[serde(rename = "gt")]
    Gt,
    #[serde(rename = "gte")]
    Gte,
    #[serde(rename = "lt")]
    Lt,
    #[serde(rename = "lte")]
    Lte,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::Eq
    }
}
