/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferDestinationNumber {
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<models::TransferDestinationAssistantMessage>,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.  Use cases: - `false`: To allow non-E164 numbers like `+001234567890`, `1234`, or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks. - `true` (default): To allow only E164 numbers like `+14155551234`. This is standard for PSTN calls.  If `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).  @default true (E164 check is enabled)
    #[serde(rename = "numberE164CheckEnabled", skip_serializing_if = "Option::is_none")]
    pub number_e164_check_enabled: Option<bool>,
    /// This is the phone number to transfer the call to.
    #[serde(rename = "number")]
    pub number: String,
    /// This is the extension to dial after transferring the call to the `number`.
    #[serde(rename = "extension", skip_serializing_if = "Option::is_none")]
    pub extension: Option<String>,
    /// This is the caller ID to use when transferring the call to the `number`.  Usage: - If not provided, the caller ID will be the number the call is coming from. Example, +14151111111 calls in to and the assistant transfers out to +16470000000. +16470000000 will see +14151111111 as the caller. - To change this behavior, provide a `callerId`. - Set to '{{customer.number}}' to always use the customer's number as the caller ID. - Set to '{{phoneNumber.number}}' to always use the phone number of the assistant as the caller ID. - Set to any E164 number to always use that number as the caller ID. This needs to be a number that is owned or verified by your Transport provider like Twilio.  For Twilio, you can read up more here: https://www.twilio.com/docs/voice/twiml/dial#callerid
    #[serde(rename = "callerId", skip_serializing_if = "Option::is_none")]
    pub caller_id: Option<String>,
    /// This configures how transfer is executed and the experience of the destination party receiving the call. Defaults to `blind-transfer`.  @default `transferPlan.mode='blind-transfer'`
    #[serde(rename = "transferPlan", skip_serializing_if = "Option::is_none")]
    pub transfer_plan: Option<models::TransferPlan>,
    /// This is the description of the destination, used by the AI to choose when and how to transfer the call.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl TransferDestinationNumber {
    pub fn new(r#type: Type, number: String) -> TransferDestinationNumber {
        TransferDestinationNumber {
            message: None,
            r#type,
            number_e164_check_enabled: None,
            number,
            extension: None,
            caller_id: None,
            transfer_plan: None,
            description: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "number")]
    Number,
}

impl Default for Type {
    fn default() -> Type {
        Self::Number
    }
}

