/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ToolNodeTool : This is the tool to call. To use an existing tool, send `toolId` instead.
/// This is the tool to call. To use an existing tool, send `toolId` instead.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ToolNodeTool {
    CreateApiRequestToolDto(models::CreateApiRequestToolDto),
    CreateBashToolDto(models::CreateBashToolDto),
    CreateComputerToolDto(models::CreateComputerToolDto),
    CreateDtmfToolDto(models::CreateDtmfToolDto),
    CreateEndCallToolDto(models::CreateEndCallToolDto),
    CreateFunctionToolDto(models::CreateFunctionToolDto),
    CreateGoHighLevelCalendarAvailabilityToolDto(
        models::CreateGoHighLevelCalendarAvailabilityToolDto,
    ),
    CreateGoHighLevelCalendarEventCreateToolDto(
        models::CreateGoHighLevelCalendarEventCreateToolDto,
    ),
    CreateGoHighLevelContactCreateToolDto(models::CreateGoHighLevelContactCreateToolDto),
    CreateGoHighLevelContactGetToolDto(models::CreateGoHighLevelContactGetToolDto),
    CreateGoogleCalendarCheckAvailabilityToolDto(
        models::CreateGoogleCalendarCheckAvailabilityToolDto,
    ),
    CreateGoogleCalendarCreateEventToolDto(models::CreateGoogleCalendarCreateEventToolDto),
    CreateGoogleSheetsRowAppendToolDto(models::CreateGoogleSheetsRowAppendToolDto),
    CreateMcpToolDto(models::CreateMcpToolDto),
    CreateQueryToolDto(models::CreateQueryToolDto),
    CreateSlackSendMessageToolDto(models::CreateSlackSendMessageToolDto),
    CreateSmsToolDto(models::CreateSmsToolDto),
    CreateTextEditorToolDto(models::CreateTextEditorToolDto),
    CreateTransferCallToolDto(models::CreateTransferCallToolDto),
}

impl Default for ToolNodeTool {
    fn default() -> Self {
        Self::CreateApiRequestToolDto(Default::default())
    }
}
/// The type of tool. \"apiRequest\" for API request tool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeTrue {
    #[serde(rename = "apiRequest")]
    ApiRequest,
    #[serde(rename = "bash")]
    Bash,
    #[serde(rename = "computer")]
    Computer,
    #[serde(rename = "dtmf")]
    Dtmf,
    #[serde(rename = "endCall")]
    EndCall,
    #[serde(rename = "function")]
    Function,
    #[serde(rename = "gohighlevel.calendar.availability.check")]
    GohighlevelPeriodCalendarPeriodAvailabilityPeriodCheck,
    #[serde(rename = "gohighlevel.calendar.event.create")]
    GohighlevelPeriodCalendarPeriodEventPeriodCreate,
    #[serde(rename = "gohighlevel.contact.create")]
    GohighlevelPeriodContactPeriodCreate,
    #[serde(rename = "gohighlevel.contact.get")]
    GohighlevelPeriodContactPeriodGet,
    #[serde(rename = "google.calendar.availability.check")]
    GooglePeriodCalendarPeriodAvailabilityPeriodCheck,
    #[serde(rename = "google.calendar.event.create")]
    GooglePeriodCalendarPeriodEventPeriodCreate,
    #[serde(rename = "google.sheets.row.append")]
    GooglePeriodSheetsPeriodRowPeriodAppend,
    #[serde(rename = "mcp")]
    Mcp,
    #[serde(rename = "query")]
    Query,
    #[serde(rename = "slack.message.send")]
    SlackPeriodMessagePeriodSend,
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "textEditor")]
    TextEditor,
    #[serde(rename = "transferCall")]
    TransferCall,
}

impl Default for TypeTrue {
    fn default() -> TypeTrue {
        Self::ApiRequest
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MethodTrue {
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "GET")]
    Get,
}

impl Default for MethodTrue {
    fn default() -> MethodTrue {
        Self::Post
    }
}
/// The name of the tool, fixed to 'str_replace_editor'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NameTrue {
    #[serde(rename = "str_replace_editor")]
    StrReplaceEditor,
}

impl Default for NameTrue {
    fn default() -> NameTrue {
        Self::StrReplaceEditor
    }
}
/// The sub type of tool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubTypeTrue {
    #[serde(rename = "text_editor_20241022")]
    TextEditor20241022,
}

impl Default for SubTypeTrue {
    fn default() -> SubTypeTrue {
        Self::TextEditor20241022
    }
}
