/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateCloudflareCredentialDto {
    /// Credential provider. Only allowed value is cloudflare
    #[serde(rename = "provider")]
    pub provider: Provider,
    /// Cloudflare Account Id.
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// Cloudflare API Key / Token.
    #[serde(rename = "apiKey", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<String>,
    /// Cloudflare Account Email.
    #[serde(rename = "accountEmail", skip_serializing_if = "Option::is_none")]
    pub account_email: Option<String>,
    /// This is the bucket plan that can be provided to store call artifacts in R2
    #[serde(rename = "bucketPlan", skip_serializing_if = "Option::is_none")]
    pub bucket_plan: Option<models::CloudflareR2BucketPlan>,
    /// This is the name of credential. This is just for your reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl CreateCloudflareCredentialDto {
    pub fn new(provider: Provider) -> CreateCloudflareCredentialDto {
        CreateCloudflareCredentialDto {
            provider,
            account_id: None,
            api_key: None,
            account_email: None,
            bucket_plan: None,
            name: None,
        }
    }
}
/// Credential provider. Only allowed value is cloudflare
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "cloudflare")]
    Cloudflare,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Cloudflare
    }
}
