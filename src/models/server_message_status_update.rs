/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerMessageStatusUpdate {
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<models::ServerMessageStatusUpdatePhoneNumber>,
    /// This is the type of the message. \"status-update\" is sent whenever the `call.status` changes.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "status")]
    pub status: models::ServerMessageStatusUpdateStatus,
    #[serde(rename = "endedReason", skip_serializing_if = "Option::is_none")]
    pub ended_reason: Option<models::ServerMessageStatusUpdateEndedReason>,
    /// These are the conversation messages of the call. This is only sent if the status is \"forwarding\".
    #[serde(rename = "messages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Option<Vec<models::ServerMessageStatusUpdateMessagesItem>>>,
    /// These are the conversation messages of the call. This is only sent if the status is \"forwarding\".
    #[serde(rename = "messagesOpenAIFormatted", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub messages_open_ai_formatted: Option<Option<Vec<models::OpenAiMessage>>>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<models::ServerMessageStatusUpdateDestination>,
    /// This is the timestamp of when the message was sent in milliseconds since Unix Epoch.
    #[serde(rename = "timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Option<f64>>,
    #[serde(rename = "artifact", skip_serializing_if = "Option::is_none")]
    pub artifact: Option<models::Artifact>,
    #[serde(rename = "assistant", skip_serializing_if = "Option::is_none")]
    pub assistant: Option<models::CreateAssistantDto>,
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<models::CreateCustomerDto>,
    #[serde(rename = "call", skip_serializing_if = "Option::is_none")]
    pub call: Option<models::Call>,
    /// This is the transcript of the call. This is only sent if the status is \"forwarding\".
    #[serde(rename = "transcript", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transcript: Option<Option<String>>,
    /// This is the summary of the call. This is only sent if the status is \"forwarding\".
    #[serde(rename = "summary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Option<String>>,
    /// This is the inbound phone call debugging artifacts. This is only sent if the status is \"ended\" and there was an error accepting the inbound phone call.  This will include any errors related to the \"assistant-request\" if one was made.
    #[serde(rename = "inboundPhoneCallDebuggingArtifacts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inbound_phone_call_debugging_artifacts: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
}

impl ServerMessageStatusUpdate {
    pub fn new(r#type: Type, status: models::ServerMessageStatusUpdateStatus) -> ServerMessageStatusUpdate {
        ServerMessageStatusUpdate {
            phone_number: None,
            r#type,
            status,
            ended_reason: None,
            messages: None,
            messages_open_ai_formatted: None,
            destination: None,
            timestamp: None,
            artifact: None,
            assistant: None,
            customer: None,
            call: None,
            transcript: None,
            summary: None,
            inbound_phone_call_debugging_artifacts: None,
        }
    }
}
/// This is the type of the message. \"status-update\" is sent whenever the `call.status` changes.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "status-update")]
    StatusUpdate,
}

impl Default for Type {
    fn default() -> Type {
        Self::StatusUpdate
    }
}

