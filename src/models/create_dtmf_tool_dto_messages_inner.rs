/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
#[serde(untagged)]
pub enum CreateDtmfToolDtoMessagesInner {
    ToolMessageStart(models::ToolMessageStart),
    ToolMessageComplete(models::ToolMessageComplete),
    ToolMessageFailed(models::ToolMessageFailed),
    ToolMessageDelayed(models::ToolMessageDelayed),
}

impl Default for CreateDtmfToolDtoMessagesInner {
    fn default() -> Self {
        Self::ToolMessageStart(Default::default())
    }
}
/// This message is triggered when the tool call starts.  This message is never triggered for async tools.  If this message is not provided, one of the default filler messages \"Hold on a sec\", \"One moment\", \"Just a sec\", \"Give me a moment\" or \"This'll just take a sec\" will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Type {
    #[serde(rename = "request-start")]
    RequestStart,
    #[serde(rename = "request-complete")]
    RequestComplete,
    #[serde(rename = "request-failed")]
    RequestFailed,
    #[serde(rename = "request-response-delayed")]
    RequestResponseDelayed,
}

impl Default for Type {
    fn default() -> Type {
        Self::RequestStart
    }
}
/// This is optional and defaults to \"assistant\".  When role=assistant, `content` is said out loud.  When role=system, `content` is passed to the model in a system message. Example:     system: default one     assistant:     user:     assistant:     user:     assistant:     user:     assistant: tool called     tool: your server response     <--- system prompt as hint     ---> model generates response which is spoken This is useful when you want to provide a hint to the model about what to say next.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Role {
    #[serde(rename = "assistant")]
    Assistant,
    #[serde(rename = "system")]
    System,
}

impl Default for Role {
    fn default() -> Role {
        Self::Assistant
    }
}
