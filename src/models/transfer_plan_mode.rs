/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransferPlanMode : This configures how transfer is executed and the experience of the destination party receiving the call.  Usage: - `blind-transfer`: The assistant forwards the call to the destination without any message or summary. - `blind-transfer-add-summary-to-sip-header`: The assistant forwards the call to the destination and adds a SIP header X-Transfer-Summary to the call to include the summary. - `warm-transfer-say-message`: The assistant dials the destination, delivers the `message` to the destination party, connects the customer, and leaves the call. - `warm-transfer-say-summary`: The assistant dials the destination, provides a summary of the call to the destination party, connects the customer, and leaves the call. - `warm-transfer-wait-for-operator-to-speak-first-and-then-say-message`: The assistant dials the destination, waits for the operator to speak, delivers the `message` to the destination party, and then connects the customer. - `warm-transfer-wait-for-operator-to-speak-first-and-then-say-summary`: The assistant dials the destination, waits for the operator to speak, provides a summary of the call to the destination party, and then connects the customer. - `warm-transfer-twiml`: The assistant dials the destination, executes the twiml instructions on the destination call leg, connects the customer, and leaves the call.  @default 'blind-transfer'
/// This configures how transfer is executed and the experience of the destination party receiving the call.  Usage: - `blind-transfer`: The assistant forwards the call to the destination without any message or summary. - `blind-transfer-add-summary-to-sip-header`: The assistant forwards the call to the destination and adds a SIP header X-Transfer-Summary to the call to include the summary. - `warm-transfer-say-message`: The assistant dials the destination, delivers the `message` to the destination party, connects the customer, and leaves the call. - `warm-transfer-say-summary`: The assistant dials the destination, provides a summary of the call to the destination party, connects the customer, and leaves the call. - `warm-transfer-wait-for-operator-to-speak-first-and-then-say-message`: The assistant dials the destination, waits for the operator to speak, delivers the `message` to the destination party, and then connects the customer. - `warm-transfer-wait-for-operator-to-speak-first-and-then-say-summary`: The assistant dials the destination, waits for the operator to speak, provides a summary of the call to the destination party, and then connects the customer. - `warm-transfer-twiml`: The assistant dials the destination, executes the twiml instructions on the destination call leg, connects the customer, and leaves the call.  @default 'blind-transfer'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransferPlanMode {
    #[serde(rename = "blind-transfer")]
    BlindTransfer,
    #[serde(rename = "blind-transfer-add-summary-to-sip-header")]
    BlindTransferAddSummaryToSipHeader,
    #[serde(rename = "warm-transfer-say-message")]
    WarmTransferSayMessage,
    #[serde(rename = "warm-transfer-say-summary")]
    WarmTransferSaySummary,
    #[serde(rename = "warm-transfer-twiml")]
    WarmTransferTwiml,
    #[serde(rename = "warm-transfer-wait-for-operator-to-speak-first-and-then-say-message")]
    WarmTransferWaitForOperatorToSpeakFirstAndThenSayMessage,
    #[serde(rename = "warm-transfer-wait-for-operator-to-speak-first-and-then-say-summary")]
    WarmTransferWaitForOperatorToSpeakFirstAndThenSaySummary,

}

impl std::fmt::Display for TransferPlanMode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::BlindTransfer => write!(f, "blind-transfer"),
            Self::BlindTransferAddSummaryToSipHeader => write!(f, "blind-transfer-add-summary-to-sip-header"),
            Self::WarmTransferSayMessage => write!(f, "warm-transfer-say-message"),
            Self::WarmTransferSaySummary => write!(f, "warm-transfer-say-summary"),
            Self::WarmTransferTwiml => write!(f, "warm-transfer-twiml"),
            Self::WarmTransferWaitForOperatorToSpeakFirstAndThenSayMessage => write!(f, "warm-transfer-wait-for-operator-to-speak-first-and-then-say-message"),
            Self::WarmTransferWaitForOperatorToSpeakFirstAndThenSaySummary => write!(f, "warm-transfer-wait-for-operator-to-speak-first-and-then-say-summary"),
        }
    }
}

impl Default for TransferPlanMode {
    fn default() -> TransferPlanMode {
        Self::BlindTransfer
    }
}

