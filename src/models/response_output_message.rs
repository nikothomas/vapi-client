/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResponseOutputMessage {
    /// The unique ID of the output message
    #[serde(rename = "id")]
    pub id: String,
    /// Content of the output message
    #[serde(rename = "content")]
    pub content: Vec<models::ResponseOutputText>,
    /// The role of the output message
    #[serde(rename = "role")]
    pub role: RoleTrue,
    /// The status of the message
    #[serde(rename = "status")]
    pub status: StatusTrue,
    /// The type of the output message
    #[serde(rename = "type")]
    pub r#type: TypeTrue,
}

impl ResponseOutputMessage {
    pub fn new(id: String, content: Vec<models::ResponseOutputText>, role: RoleTrue, status: StatusTrue, r#type: TypeTrue) -> ResponseOutputMessage {
        ResponseOutputMessage {
            id,
            content,
            role,
            status,
            r#type,
        }
    }
}
/// The role of the output message
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoleTrue {
    #[serde(rename = "assistant")]
    Assistant,
}

impl Default for RoleTrue {
    fn default() -> RoleTrue {
        Self::Assistant
    }
}
/// The status of the message
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusTrue {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "incomplete")]
    Incomplete,
}

impl Default for StatusTrue {
    fn default() -> StatusTrue {
        Self::InProgress
    }
}
/// The type of the output message
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeTrue {
    #[serde(rename = "message")]
    Message,
}

impl Default for TypeTrue {
    fn default() -> TypeTrue {
        Self::Message
    }
}

