/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SesameVoice {
    /// This is the flag to toggle voice caching for the assistant.
    #[serde(rename = "cachingEnabled", skip_serializing_if = "Option::is_none")]
    pub caching_enabled: Option<bool>,
    /// This is the voice provider that will be used.
    #[serde(rename = "provider")]
    pub provider: ProviderTrue,
    /// This is the provider-specific ID that will be used.
    #[serde(rename = "voiceId")]
    pub voice_id: String,
    /// This is the model that will be used.
    #[serde(rename = "model")]
    pub model: ModelTrue,
    /// This is the plan for chunking the model output before it is sent to the voice provider.
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
    /// This is the plan for voice provider fallbacks in the event that the primary voice provider fails.
    #[serde(rename = "fallbackPlan", skip_serializing_if = "Option::is_none")]
    pub fallback_plan: Option<models::FallbackPlan>,
}

impl SesameVoice {
    pub fn new(provider: ProviderTrue, voice_id: String, model: ModelTrue) -> SesameVoice {
        SesameVoice {
            caching_enabled: None,
            provider,
            voice_id,
            model,
            chunk_plan: None,
            fallback_plan: None,
        }
    }
}
/// This is the voice provider that will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProviderTrue {
    #[serde(rename = "sesame")]
    Sesame,
}

impl Default for ProviderTrue {
    fn default() -> ProviderTrue {
        Self::Sesame
    }
}
/// This is the model that will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ModelTrue {
    #[serde(rename = "csm-1b")]
    Csm1b,
}

impl Default for ModelTrue {
    fn default() -> ModelTrue {
        Self::Csm1b
    }
}
