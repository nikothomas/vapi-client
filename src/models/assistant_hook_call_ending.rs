/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssistantHookCallEnding {
    /// This is the event that triggers this hook
    #[serde(rename = "on")]
    pub on: OnTrue,
    /// This is the set of actions to perform when the hook triggers
    #[serde(rename = "do")]
    pub r#do: Vec<models::AssistantHookCallEndingDoInner>,
    /// This is the set of filters that must match for the hook to trigger
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::AssistantHookFilter>>,
}

impl AssistantHookCallEnding {
    pub fn new(
        on: OnTrue,
        r#do: Vec<models::AssistantHookCallEndingDoInner>,
    ) -> AssistantHookCallEnding {
        AssistantHookCallEnding {
            on,
            r#do,
            filters: None,
        }
    }
}
/// This is the event that triggers this hook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnTrue {
    #[serde(rename = "call.ending")]
    CallPeriodEnding,
}

impl Default for OnTrue {
    fn default() -> OnTrue {
        Self::CallPeriodEnding
    }
}
