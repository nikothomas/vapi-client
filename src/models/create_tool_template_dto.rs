/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateToolTemplateDto {
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<models::CreateToolTemplateDtoDetails>,
    #[serde(rename = "providerDetails", skip_serializing_if = "Option::is_none")]
    pub provider_details: Option<models::CreateToolTemplateDtoProviderDetails>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<models::ToolTemplateMetadata>,
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<models::CreateToolTemplateDtoVisibility>,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The name of the template. This is just for your own reference.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<models::CreateToolTemplateDtoProvider>,
}

impl CreateToolTemplateDto {
    pub fn new(r#type: Type) -> CreateToolTemplateDto {
        CreateToolTemplateDto {
            details: None,
            provider_details: None,
            metadata: None,
            visibility: None,
            r#type,
            name: None,
            provider: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "tool")]
    Tool,
}

impl Default for Type {
    fn default() -> Type {
        Self::Tool
    }
}

