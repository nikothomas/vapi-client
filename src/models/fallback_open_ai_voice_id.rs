/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FallbackOpenAiVoiceId : This is the provider-specific ID that will be used. Please note that ash, ballad, coral, sage, and verse may only be used with realtime models.
/// This is the provider-specific ID that will be used. Please note that ash, ballad, coral, sage, and verse may only be used with realtime models.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FallbackOpenAiVoiceId {
    #[serde(rename = "alloy")]
    Alloy,
    #[serde(rename = "echo")]
    Echo,
    #[serde(rename = "fable")]
    Fable,
    #[serde(rename = "onyx")]
    Onyx,
    #[serde(rename = "nova")]
    Nova,
    #[serde(rename = "shimmer")]
    Shimmer,
    #[serde(rename = "ash")]
    Ash,
    #[serde(rename = "ballad")]
    Ballad,
    #[serde(rename = "coral")]
    Coral,
    #[serde(rename = "sage")]
    Sage,
    #[serde(rename = "verse")]
    Verse,

}

impl std::fmt::Display for FallbackOpenAiVoiceId {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Alloy => write!(f, "alloy"),
            Self::Echo => write!(f, "echo"),
            Self::Fable => write!(f, "fable"),
            Self::Onyx => write!(f, "onyx"),
            Self::Nova => write!(f, "nova"),
            Self::Shimmer => write!(f, "shimmer"),
            Self::Ash => write!(f, "ash"),
            Self::Ballad => write!(f, "ballad"),
            Self::Coral => write!(f, "coral"),
            Self::Sage => write!(f, "sage"),
            Self::Verse => write!(f, "verse"),
        }
    }
}

impl Default for FallbackOpenAiVoiceId {
    fn default() -> FallbackOpenAiVoiceId {
        Self::Alloy
    }
}

