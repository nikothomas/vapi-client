/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateS3CredentialDto {
    /// Credential provider. Only allowed value is s3
    #[serde(rename = "provider")]
    pub provider: ProviderTrue,
    /// AWS access key ID.
    #[serde(rename = "awsAccessKeyId")]
    pub aws_access_key_id: String,
    /// AWS access key secret. This is not returned in the API.
    #[serde(rename = "awsSecretAccessKey")]
    pub aws_secret_access_key: String,
    /// AWS region in which the S3 bucket is located.
    #[serde(rename = "region")]
    pub region: String,
    /// AWS S3 bucket name.
    #[serde(rename = "s3BucketName")]
    pub s3_bucket_name: String,
    /// The path prefix for the uploaded recording. Ex. \"recordings/\"
    #[serde(rename = "s3PathPrefix")]
    pub s3_path_prefix: String,
    /// This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.
    #[serde(rename = "fallbackIndex", skip_serializing_if = "Option::is_none")]
    pub fallback_index: Option<f64>,
    /// This is the name of credential. This is just for your reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl CreateS3CredentialDto {
    pub fn new(
        provider: ProviderTrue,
        aws_access_key_id: String,
        aws_secret_access_key: String,
        region: String,
        s3_bucket_name: String,
        s3_path_prefix: String,
    ) -> CreateS3CredentialDto {
        CreateS3CredentialDto {
            provider,
            aws_access_key_id,
            aws_secret_access_key,
            region,
            s3_bucket_name,
            s3_path_prefix,
            fallback_index: None,
            name: None,
        }
    }
}
/// Credential provider. Only allowed value is s3
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProviderTrue {
    #[serde(rename = "s3")]
    S3,
}

impl Default for ProviderTrue {
    fn default() -> ProviderTrue {
        Self::S3
    }
}
