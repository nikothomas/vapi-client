/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimeRange {
    #[serde(rename = "step", skip_serializing_if = "Option::is_none")]
    pub step: Option<models::TimeRangeStep>,
    /// This is the start date for the time range.  If not provided, defaults to the 7 days ago.
    #[serde(rename = "start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start: Option<Option<String>>,
    /// This is the end date for the time range.  If not provided, defaults to now.
    #[serde(rename = "end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end: Option<Option<String>>,
    /// This is the timezone you want to set for the query.  If not provided, defaults to UTC.
    #[serde(rename = "timezone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<Option<String>>,
}

impl TimeRange {
    pub fn new() -> TimeRange {
        TimeRange {
            step: None,
            start: None,
            end: None,
            timezone: None,
        }
    }
}

