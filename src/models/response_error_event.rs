/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResponseErrorEvent {
    /// Event type
    #[serde(rename = "type")]
    pub r#type: TypeTrue,
    /// Error code
    #[serde(rename = "code")]
    pub code: String,
    /// Error message
    #[serde(rename = "message")]
    pub message: String,
    /// Parameter that caused the error
    #[serde(rename = "param", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub param: Option<Option<String>>,
    /// Sequence number of the event
    #[serde(rename = "sequence_number")]
    pub sequence_number: f64,
}

impl ResponseErrorEvent {
    pub fn new(r#type: TypeTrue, code: String, message: String, sequence_number: f64) -> ResponseErrorEvent {
        ResponseErrorEvent {
            r#type,
            code,
            message,
            param: None,
            sequence_number,
        }
    }
}
/// Event type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeTrue {
    #[serde(rename = "error")]
    Error,
}

impl Default for TypeTrue {
    fn default() -> TypeTrue {
        Self::Error
    }
}

