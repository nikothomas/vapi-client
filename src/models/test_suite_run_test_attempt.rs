/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteRunTestAttempt {
    /// These are the results of the scorers used to evaluate the test attempt.
    #[serde(rename = "scorerResults")]
    pub scorer_results: Vec<models::TestSuiteRunScorerAi>,
    #[serde(rename = "call", skip_serializing_if = "Option::is_none")]
    pub call: Option<models::TestSuiteRunTestAttemptCall>,
    /// This is the call ID for the test attempt.
    #[serde(rename = "callId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub call_id: Option<Option<String>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<models::TestSuiteRunTestAttemptMetadata>,
}

impl TestSuiteRunTestAttempt {
    pub fn new(scorer_results: Vec<models::TestSuiteRunScorerAi>) -> TestSuiteRunTestAttempt {
        TestSuiteRunTestAttempt {
            scorer_results,
            call: None,
            call_id: None,
            metadata: None,
        }
    }
}

