/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct File {
    #[serde(rename = "object", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object: Option<Option<Object>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::FileStatus>,
    /// This is the name of the file. This is just for your own reference.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "originalName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub original_name: Option<Option<String>>,
    #[serde(rename = "bytes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bytes: Option<Option<f64>>,
    #[serde(rename = "purpose", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Option<String>>,
    #[serde(rename = "mimetype", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mimetype: Option<Option<String>>,
    #[serde(rename = "key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key: Option<Option<String>>,
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "bucket", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bucket: Option<Option<String>>,
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    #[serde(rename = "parsedTextUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parsed_text_url: Option<Option<String>>,
    #[serde(rename = "parsedTextBytes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parsed_text_bytes: Option<Option<f64>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    /// This is the unique identifier for the file.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this file belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is the ISO 8601 date-time string of when the file was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the file was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl File {
    pub fn new(id: String, org_id: String, created_at: String, updated_at: String) -> File {
        File {
            object: None,
            status: None,
            name: None,
            original_name: None,
            bytes: None,
            purpose: None,
            mimetype: None,
            key: None,
            path: None,
            bucket: None,
            url: None,
            parsed_text_url: None,
            parsed_text_bytes: None,
            metadata: None,
            id,
            org_id,
            created_at,
            updated_at,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "file")]
    File,
}

impl Default for Object {
    fn default() -> Object {
        Self::File
    }
}

