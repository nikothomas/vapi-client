/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Log {
    /// This is the timestamp at which the log was written.
    #[serde(rename = "time")]
    pub time: String,
    /// This is the unique identifier for the org that this log belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    #[serde(rename = "type")]
    pub r#type: models::LogType,
    /// This is the type of the webhook, given the log is from a webhook.
    #[serde(rename = "webhookType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_type: Option<Option<String>>,
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<models::LogResource>,
    /// 'This is how long the request took.
    #[serde(rename = "requestDurationSeconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_duration_seconds: Option<Option<f64>>,
    /// This is the timestamp at which the request began.
    #[serde(rename = "requestStartedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_started_at: Option<Option<String>>,
    /// This is the timestamp at which the request finished.
    #[serde(rename = "requestFinishedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_finished_at: Option<Option<String>>,
    /// This is the body of the request.
    #[serde(rename = "requestBody", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_body: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "requestHttpMethod", skip_serializing_if = "Option::is_none")]
    pub request_http_method: Option<models::LogRequestHttpMethod>,
    /// This is the request URL.
    #[serde(rename = "requestUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_url: Option<Option<String>>,
    /// This is the request path.
    #[serde(rename = "requestPath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_path: Option<Option<String>>,
    /// This is the request query.
    #[serde(rename = "requestQuery", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_query: Option<Option<String>>,
    /// This the HTTP status code of the response.
    #[serde(rename = "responseHttpCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub response_http_code: Option<Option<f64>>,
    /// This is the request IP address.
    #[serde(rename = "requestIpAddress", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_ip_address: Option<Option<String>>,
    /// This is the origin of the request
    #[serde(rename = "requestOrigin", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_origin: Option<Option<String>>,
    /// This is the body of the response.
    #[serde(rename = "responseBody", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub response_body: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    /// These are the headers of the request.
    #[serde(rename = "requestHeaders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub request_headers: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<models::Error>,
    /// This is the ID of the assistant.
    #[serde(rename = "assistantId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assistant_id: Option<Option<String>>,
    /// This is the ID of the phone number.
    #[serde(rename = "phoneNumberId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone_number_id: Option<Option<String>>,
    /// This is the ID of the customer.
    #[serde(rename = "customerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<Option<String>>,
    /// This is the ID of the squad.
    #[serde(rename = "squadId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub squad_id: Option<Option<String>>,
    /// This is the ID of the call.
    #[serde(rename = "callId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub call_id: Option<Option<String>>,
}

impl Log {
    pub fn new(time: String, org_id: String, r#type: models::LogType) -> Log {
        Log {
            time,
            org_id,
            r#type,
            webhook_type: None,
            resource: None,
            request_duration_seconds: None,
            request_started_at: None,
            request_finished_at: None,
            request_body: None,
            request_http_method: None,
            request_url: None,
            request_path: None,
            request_query: None,
            response_http_code: None,
            request_ip_address: None,
            request_origin: None,
            response_body: None,
            request_headers: None,
            error: None,
            assistant_id: None,
            phone_number_id: None,
            customer_id: None,
            squad_id: None,
            call_id: None,
        }
    }
}

