/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonSchema {
    #[serde(rename = "type")]
    pub r#type: models::JsonSchemaType,
    /// This is required if the type is \"array\". This is the schema of the items in the array.  This is of type JsonSchema. However, Swagger doesn't support circular references.
    #[serde(rename = "items", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub items: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    /// This is required if the type is \"object\". This specifies the properties of the object.  This is a map of string to JsonSchema. However, Swagger doesn't support circular references.
    #[serde(rename = "properties", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    /// This is the description to help the model understand what it needs to output.
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// This is a list of properties that are required.  This only makes sense if the type is \"object\".
    #[serde(rename = "required", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub required: Option<Option<Vec<String>>>,
    /// This is a regex that will be used to validate data in question.
    #[serde(rename = "regex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub regex: Option<Option<String>>,
    /// This the value that will be used in filling the property.
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<String>>,
    /// This the target variable that will be filled with the value of this property.
    #[serde(rename = "target", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub target: Option<Option<String>>,
    /// This array specifies the allowed values that can be used to restrict the output of the model.
    #[serde(rename = "enum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#enum: Option<Option<Vec<String>>>,
}

impl JsonSchema {
    pub fn new(r#type: models::JsonSchemaType) -> JsonSchema {
        JsonSchema {
            r#type,
            items: None,
            properties: None,
            description: None,
            required: None,
            regex: None,
            value: None,
            target: None,
            r#enum: None,
        }
    }
}

