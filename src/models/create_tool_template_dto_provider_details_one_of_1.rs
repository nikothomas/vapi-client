/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateToolTemplateDtoProviderDetailsOneOf1 {
    /// This is the Template URL or the Snapshot URL corresponding to the Template.
    #[serde(rename = "templateUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub template_url: Option<Option<String>>,
    #[serde(rename = "setupInstructions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub setup_instructions: Option<Option<Vec<models::ToolTemplateSetup>>>,
    #[serde(rename = "workflowId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub workflow_id: Option<Option<String>>,
    #[serde(rename = "workflowName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub workflow_name: Option<Option<String>>,
    #[serde(rename = "webhookHookId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_hook_id: Option<Option<String>>,
    #[serde(rename = "webhookHookName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_hook_name: Option<Option<String>>,
    #[serde(rename = "locationId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub location_id: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl CreateToolTemplateDtoProviderDetailsOneOf1 {
    pub fn new(r#type: Type) -> CreateToolTemplateDtoProviderDetailsOneOf1 {
        CreateToolTemplateDtoProviderDetailsOneOf1 {
            template_url: None,
            setup_instructions: None,
            workflow_id: None,
            workflow_name: None,
            webhook_hook_id: None,
            webhook_hook_name: None,
            location_id: None,
            r#type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ghl")]
    Ghl,
}

impl Default for Type {
    fn default() -> Type {
        Self::Ghl
    }
}

