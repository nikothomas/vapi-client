/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerMessageEndOfCallReport {
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<models::ServerMessageEndOfCallReportPhoneNumber>,
    /// This is the type of the message. \"end-of-call-report\" is sent when the call ends and post-processing is complete.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "endedReason")]
    pub ended_reason: models::ServerMessageEndOfCallReportEndedReason,
    /// This is the cost of the call in USD. This can also be found at `call.cost` on GET /call/:id.
    #[serde(rename = "cost", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cost: Option<Option<f64>>,
    /// These are the costs of individual components of the call in USD. This can also be found at `call.costs` on GET /call/:id.
    #[serde(rename = "costs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub costs: Option<Option<Vec<models::ServerMessageEndOfCallReportCostsItem>>>,
    /// This is the timestamp of when the message was sent in milliseconds since Unix Epoch.
    #[serde(rename = "timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Option<f64>>,
    #[serde(rename = "artifact")]
    pub artifact: models::Artifact,
    #[serde(rename = "assistant", skip_serializing_if = "Option::is_none")]
    pub assistant: Option<models::CreateAssistantDto>,
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<models::CreateCustomerDto>,
    #[serde(rename = "call", skip_serializing_if = "Option::is_none")]
    pub call: Option<models::Call>,
    #[serde(rename = "analysis")]
    pub analysis: models::Analysis,
    /// This is the ISO 8601 date-time string of when the call started. This can also be found at `call.startedAt` on GET /call/:id.
    #[serde(rename = "startedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<Option<String>>,
    /// This is the ISO 8601 date-time string of when the call ended. This can also be found at `call.endedAt` on GET /call/:id.
    #[serde(rename = "endedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ended_at: Option<Option<String>>,
}

impl ServerMessageEndOfCallReport {
    pub fn new(r#type: Type, ended_reason: models::ServerMessageEndOfCallReportEndedReason, artifact: models::Artifact, analysis: models::Analysis) -> ServerMessageEndOfCallReport {
        ServerMessageEndOfCallReport {
            phone_number: None,
            r#type,
            ended_reason,
            cost: None,
            costs: None,
            timestamp: None,
            artifact,
            assistant: None,
            customer: None,
            call: None,
            analysis,
            started_at: None,
            ended_at: None,
        }
    }
}
/// This is the type of the message. \"end-of-call-report\" is sent when the call ends and post-processing is complete.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "end-of-call-report")]
    EndOfCallReport,
}

impl Default for Type {
    fn default() -> Type {
        Self::EndOfCallReport
    }
}

