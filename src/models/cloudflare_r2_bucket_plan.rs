/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloudflareR2BucketPlan {
    /// Cloudflare R2 Access key ID.
    #[serde(rename = "accessKeyId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub access_key_id: Option<Option<String>>,
    /// Cloudflare R2 access key secret. This is not returned in the API.
    #[serde(rename = "secretAccessKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secret_access_key: Option<Option<String>>,
    /// Cloudflare R2 base url.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    /// This is the name of the bucket.
    #[serde(rename = "name")]
    pub name: String,
    /// This is the path where call artifacts will be stored.  Usage: - To store call artifacts in a specific folder, set this to the full path. Eg. \"/folder-name1/folder-name2\". - To store call artifacts in the root of the bucket, leave this blank.  @default \"/\"
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
}

impl CloudflareR2BucketPlan {
    pub fn new(name: String) -> CloudflareR2BucketPlan {
        CloudflareR2BucketPlan {
            access_key_id: None,
            secret_access_key: None,
            url: None,
            name,
            path: None,
        }
    }
}

