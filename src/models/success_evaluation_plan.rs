/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuccessEvaluationPlan {
    #[serde(rename = "rubric", skip_serializing_if = "Option::is_none")]
    pub rubric: Option<models::SuccessEvaluationPlanRubric>,
    /// These are the messages used to generate the success evaluation.  @default: ``` [   {     \"role\": \"system\",     \"content\": \"You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt. DO NOT return anything except the result.\\n\\nRubric:\\\\n{{rubric}}\\n\\nOnly respond with the result.\"   },   {     \"role\": \"user\",     \"content\": \"Here is the transcript:\\n\\n{{transcript}}\\n\\n\"   },   {     \"role\": \"user\",     \"content\": \"Here was the system prompt of the call:\\n\\n{{systemPrompt}}\\n\\n\"   } ]```  You can customize by providing any messages you want.  Here are the template variables available: - {{transcript}}: the transcript of the call from `call.artifact.transcript`- {{systemPrompt}}: the system prompt of the call from `assistant.model.messages[type=system].content`- {{rubric}}: the rubric of the success evaluation from `successEvaluationPlan.rubric`
    #[serde(rename = "messages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Option<Vec<std::collections::HashMap<String, serde_json::Value>>>>,
    /// This determines whether a success evaluation is generated and stored in `call.analysis.successEvaluation`. Defaults to true.  Usage: - If you want to disable the success evaluation, set this to false.  @default true
    #[serde(rename = "enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<Option<bool>>,
    /// This is how long the request is tried before giving up. When request times out, `call.analysis.successEvaluation` will be empty.  Usage: - To guarantee the success evaluation is generated, set this value high. Note, this will delay the end of call report in cases where model is slow to respond.  @default 5 seconds
    #[serde(rename = "timeoutSeconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<Option<f64>>,
}

impl SuccessEvaluationPlan {
    pub fn new() -> SuccessEvaluationPlan {
        SuccessEvaluationPlan {
            rubric: None,
            messages: None,
            enabled: None,
            timeout_seconds: None,
        }
    }
}

