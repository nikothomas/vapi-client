/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FallbackPlanVoicesItemOneOf {
    #[serde(rename = "voiceId")]
    pub voice_id: models::FallbackAzureVoiceId,
    /// This is the speed multiplier that will be used.
    #[serde(rename = "speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub speed: Option<Option<f64>>,
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
    #[serde(rename = "oneOf", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub one_of: Option<Option<serde_json::Value>>,
    #[serde(rename = "provider")]
    pub provider: Provider,
}

impl FallbackPlanVoicesItemOneOf {
    pub fn new(voice_id: models::FallbackAzureVoiceId, provider: Provider) -> FallbackPlanVoicesItemOneOf {
        FallbackPlanVoicesItemOneOf {
            voice_id,
            speed: None,
            chunk_plan: None,
            one_of: None,
            provider,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "azure")]
    Azure,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Azure
    }
}

