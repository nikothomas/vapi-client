/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TalkscriberTranscriberLanguage : This is the language that will be set for the transcription. The list of languages Whisper supports can be found here: https://github.com/openai/whisper/blob/main/whisper/tokenizer.py
/// This is the language that will be set for the transcription. The list of languages Whisper supports can be found here: https://github.com/openai/whisper/blob/main/whisper/tokenizer.py
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TalkscriberTranscriberLanguage {
    #[serde(rename = "en")]
    En,
    #[serde(rename = "zh")]
    Zh,
    #[serde(rename = "de")]
    De,
    #[serde(rename = "es")]
    Es,
    #[serde(rename = "ru")]
    Ru,
    #[serde(rename = "ko")]
    Ko,
    #[serde(rename = "fr")]
    Fr,
    #[serde(rename = "ja")]
    Ja,
    #[serde(rename = "pt")]
    Pt,
    #[serde(rename = "tr")]
    Tr,
    #[serde(rename = "pl")]
    Pl,
    #[serde(rename = "ca")]
    Ca,
    #[serde(rename = "nl")]
    Nl,
    #[serde(rename = "ar")]
    Ar,
    #[serde(rename = "sv")]
    Sv,
    #[serde(rename = "it")]
    It,
    #[serde(rename = "id")]
    Id,
    #[serde(rename = "hi")]
    Hi,
    #[serde(rename = "fi")]
    Fi,
    #[serde(rename = "vi")]
    Vi,
    #[serde(rename = "he")]
    He,
    #[serde(rename = "uk")]
    Uk,
    #[serde(rename = "el")]
    El,
    #[serde(rename = "ms")]
    Ms,
    #[serde(rename = "cs")]
    Cs,
    #[serde(rename = "ro")]
    Ro,
    #[serde(rename = "da")]
    Da,
    #[serde(rename = "hu")]
    Hu,
    #[serde(rename = "ta")]
    Ta,
    #[serde(rename = "no")]
    No,
    #[serde(rename = "th")]
    Th,
    #[serde(rename = "ur")]
    Ur,
    #[serde(rename = "hr")]
    Hr,
    #[serde(rename = "bg")]
    Bg,
    #[serde(rename = "lt")]
    Lt,
    #[serde(rename = "la")]
    La,
    #[serde(rename = "mi")]
    Mi,
    #[serde(rename = "ml")]
    Ml,
    #[serde(rename = "cy")]
    Cy,
    #[serde(rename = "sk")]
    Sk,
    #[serde(rename = "te")]
    Te,
    #[serde(rename = "fa")]
    Fa,
    #[serde(rename = "lv")]
    Lv,
    #[serde(rename = "bn")]
    Bn,
    #[serde(rename = "sr")]
    Sr,
    #[serde(rename = "az")]
    Az,
    #[serde(rename = "sl")]
    Sl,
    #[serde(rename = "kn")]
    Kn,
    #[serde(rename = "et")]
    Et,
    #[serde(rename = "mk")]
    Mk,
    #[serde(rename = "br")]
    Br,
    #[serde(rename = "eu")]
    Eu,
    #[serde(rename = "is")]
    Is,
    #[serde(rename = "hy")]
    Hy,
    #[serde(rename = "ne")]
    Ne,
    #[serde(rename = "mn")]
    Mn,
    #[serde(rename = "bs")]
    Bs,
    #[serde(rename = "kk")]
    Kk,
    #[serde(rename = "sq")]
    Sq,
    #[serde(rename = "sw")]
    Sw,
    #[serde(rename = "gl")]
    Gl,
    #[serde(rename = "mr")]
    Mr,
    #[serde(rename = "pa")]
    Pa,
    #[serde(rename = "si")]
    Si,
    #[serde(rename = "km")]
    Km,
    #[serde(rename = "sn")]
    Sn,
    #[serde(rename = "yo")]
    Yo,
    #[serde(rename = "so")]
    So,
    #[serde(rename = "af")]
    Af,
    #[serde(rename = "oc")]
    Oc,
    #[serde(rename = "ka")]
    Ka,
    #[serde(rename = "be")]
    Be,
    #[serde(rename = "tg")]
    Tg,
    #[serde(rename = "sd")]
    Sd,
    #[serde(rename = "gu")]
    Gu,
    #[serde(rename = "am")]
    Am,
    #[serde(rename = "yi")]
    Yi,
    #[serde(rename = "lo")]
    Lo,
    #[serde(rename = "uz")]
    Uz,
    #[serde(rename = "fo")]
    Fo,
    #[serde(rename = "ht")]
    Ht,
    #[serde(rename = "ps")]
    Ps,
    #[serde(rename = "tk")]
    Tk,
    #[serde(rename = "nn")]
    Nn,
    #[serde(rename = "mt")]
    Mt,
    #[serde(rename = "sa")]
    Sa,
    #[serde(rename = "lb")]
    Lb,
    #[serde(rename = "my")]
    My,
    #[serde(rename = "bo")]
    Bo,
    #[serde(rename = "tl")]
    Tl,
    #[serde(rename = "mg")]
    Mg,
    #[serde(rename = "as")]
    As,
    #[serde(rename = "tt")]
    Tt,
    #[serde(rename = "haw")]
    Haw,
    #[serde(rename = "ln")]
    Ln,
    #[serde(rename = "ha")]
    Ha,
    #[serde(rename = "ba")]
    Ba,
    #[serde(rename = "jw")]
    Jw,
    #[serde(rename = "su")]
    Su,
    #[serde(rename = "yue")]
    Yue,

}

impl std::fmt::Display for TalkscriberTranscriberLanguage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::En => write!(f, "en"),
            Self::Zh => write!(f, "zh"),
            Self::De => write!(f, "de"),
            Self::Es => write!(f, "es"),
            Self::Ru => write!(f, "ru"),
            Self::Ko => write!(f, "ko"),
            Self::Fr => write!(f, "fr"),
            Self::Ja => write!(f, "ja"),
            Self::Pt => write!(f, "pt"),
            Self::Tr => write!(f, "tr"),
            Self::Pl => write!(f, "pl"),
            Self::Ca => write!(f, "ca"),
            Self::Nl => write!(f, "nl"),
            Self::Ar => write!(f, "ar"),
            Self::Sv => write!(f, "sv"),
            Self::It => write!(f, "it"),
            Self::Id => write!(f, "id"),
            Self::Hi => write!(f, "hi"),
            Self::Fi => write!(f, "fi"),
            Self::Vi => write!(f, "vi"),
            Self::He => write!(f, "he"),
            Self::Uk => write!(f, "uk"),
            Self::El => write!(f, "el"),
            Self::Ms => write!(f, "ms"),
            Self::Cs => write!(f, "cs"),
            Self::Ro => write!(f, "ro"),
            Self::Da => write!(f, "da"),
            Self::Hu => write!(f, "hu"),
            Self::Ta => write!(f, "ta"),
            Self::No => write!(f, "no"),
            Self::Th => write!(f, "th"),
            Self::Ur => write!(f, "ur"),
            Self::Hr => write!(f, "hr"),
            Self::Bg => write!(f, "bg"),
            Self::Lt => write!(f, "lt"),
            Self::La => write!(f, "la"),
            Self::Mi => write!(f, "mi"),
            Self::Ml => write!(f, "ml"),
            Self::Cy => write!(f, "cy"),
            Self::Sk => write!(f, "sk"),
            Self::Te => write!(f, "te"),
            Self::Fa => write!(f, "fa"),
            Self::Lv => write!(f, "lv"),
            Self::Bn => write!(f, "bn"),
            Self::Sr => write!(f, "sr"),
            Self::Az => write!(f, "az"),
            Self::Sl => write!(f, "sl"),
            Self::Kn => write!(f, "kn"),
            Self::Et => write!(f, "et"),
            Self::Mk => write!(f, "mk"),
            Self::Br => write!(f, "br"),
            Self::Eu => write!(f, "eu"),
            Self::Is => write!(f, "is"),
            Self::Hy => write!(f, "hy"),
            Self::Ne => write!(f, "ne"),
            Self::Mn => write!(f, "mn"),
            Self::Bs => write!(f, "bs"),
            Self::Kk => write!(f, "kk"),
            Self::Sq => write!(f, "sq"),
            Self::Sw => write!(f, "sw"),
            Self::Gl => write!(f, "gl"),
            Self::Mr => write!(f, "mr"),
            Self::Pa => write!(f, "pa"),
            Self::Si => write!(f, "si"),
            Self::Km => write!(f, "km"),
            Self::Sn => write!(f, "sn"),
            Self::Yo => write!(f, "yo"),
            Self::So => write!(f, "so"),
            Self::Af => write!(f, "af"),
            Self::Oc => write!(f, "oc"),
            Self::Ka => write!(f, "ka"),
            Self::Be => write!(f, "be"),
            Self::Tg => write!(f, "tg"),
            Self::Sd => write!(f, "sd"),
            Self::Gu => write!(f, "gu"),
            Self::Am => write!(f, "am"),
            Self::Yi => write!(f, "yi"),
            Self::Lo => write!(f, "lo"),
            Self::Uz => write!(f, "uz"),
            Self::Fo => write!(f, "fo"),
            Self::Ht => write!(f, "ht"),
            Self::Ps => write!(f, "ps"),
            Self::Tk => write!(f, "tk"),
            Self::Nn => write!(f, "nn"),
            Self::Mt => write!(f, "mt"),
            Self::Sa => write!(f, "sa"),
            Self::Lb => write!(f, "lb"),
            Self::My => write!(f, "my"),
            Self::Bo => write!(f, "bo"),
            Self::Tl => write!(f, "tl"),
            Self::Mg => write!(f, "mg"),
            Self::As => write!(f, "as"),
            Self::Tt => write!(f, "tt"),
            Self::Haw => write!(f, "haw"),
            Self::Ln => write!(f, "ln"),
            Self::Ha => write!(f, "ha"),
            Self::Ba => write!(f, "ba"),
            Self::Jw => write!(f, "jw"),
            Self::Su => write!(f, "su"),
            Self::Yue => write!(f, "yue"),
        }
    }
}

impl Default for TalkscriberTranscriberLanguage {
    fn default() -> TalkscriberTranscriberLanguage {
        Self::En
    }
}

