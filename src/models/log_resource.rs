/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LogResource : This is the specific resource, relevant only to API logs.
/// This is the specific resource, relevant only to API logs.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogResource {
    #[serde(rename = "org")]
    Org,
    #[serde(rename = "assistant")]
    Assistant,
    #[serde(rename = "analytics")]
    Analytics,
    #[serde(rename = "credential")]
    Credential,
    #[serde(rename = "phone-number")]
    PhoneNumber,
    #[serde(rename = "block")]
    Block,
    #[serde(rename = "voice-library")]
    VoiceLibrary,
    #[serde(rename = "provider")]
    Provider,
    #[serde(rename = "tool")]
    Tool,
    #[serde(rename = "token")]
    Token,
    #[serde(rename = "template")]
    Template,
    #[serde(rename = "squad")]
    Squad,
    #[serde(rename = "call")]
    Call,
    #[serde(rename = "file")]
    File,
    #[serde(rename = "metric")]
    Metric,
    #[serde(rename = "log")]
    Log,

}

impl std::fmt::Display for LogResource {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Org => write!(f, "org"),
            Self::Assistant => write!(f, "assistant"),
            Self::Analytics => write!(f, "analytics"),
            Self::Credential => write!(f, "credential"),
            Self::PhoneNumber => write!(f, "phone-number"),
            Self::Block => write!(f, "block"),
            Self::VoiceLibrary => write!(f, "voice-library"),
            Self::Provider => write!(f, "provider"),
            Self::Tool => write!(f, "tool"),
            Self::Token => write!(f, "token"),
            Self::Template => write!(f, "template"),
            Self::Squad => write!(f, "squad"),
            Self::Call => write!(f, "call"),
            Self::File => write!(f, "file"),
            Self::Metric => write!(f, "metric"),
            Self::Log => write!(f, "log"),
        }
    }
}

impl Default for LogResource {
    fn default() -> LogResource {
        Self::Org
    }
}

