/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
pub struct OpenAiFunctionParameters {
    /// This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This provides a description of the properties required by the function. JSON Schema can be used to specify expectations for each property. Refer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.
    #[serde(rename = "properties")]
    pub properties: std::collections::HashMap<String, models::JsonSchema>,
    /// This specifies the properties that are required by the function.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<Vec<String>>,
}

impl OpenAiFunctionParameters {
    pub fn new(
        r#type: Type,
        properties: std::collections::HashMap<String, models::JsonSchema>,
    ) -> OpenAiFunctionParameters {
        OpenAiFunctionParameters {
            r#type,
            properties,
            required: None,
        }
    }
}
/// This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Type {
    #[serde(rename = "object")]
    Object,
}

impl Default for Type {
    fn default() -> Type {
        Self::Object
    }
}
