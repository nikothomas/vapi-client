/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Server {
    /// This is the timeout in seconds for the request. Defaults to 20 seconds.  @default 20
    #[serde(rename = "timeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<f64>,
    /// This is where the request will be sent.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// These are the headers to include in the request.  Each key-value pair represents a header name and its value.
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<serde_json::Value>,
    /// This is the backoff plan if the request fails. Defaults to undefined (the request will not be retried).  @default undefined (the request will not be retried)
    #[serde(rename = "backoffPlan", skip_serializing_if = "Option::is_none")]
    pub backoff_plan: Option<models::BackoffPlan>,
}

impl Server {
    pub fn new() -> Server {
        Server {
            timeout_seconds: None,
            url: None,
            headers: None,
            backoff_plan: None,
        }
    }
}

