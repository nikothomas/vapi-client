/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientMessageSpeechUpdate {
    /// This is the type of the message. \"speech-update\" is sent whenever assistant or user start or stop speaking.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "status")]
    pub status: models::ClientMessageSpeechUpdateStatus,
    #[serde(rename = "role")]
    pub role: models::ClientMessageSpeechUpdateRole,
    /// This is the turn number of the speech update (0-indexed).
    #[serde(rename = "turn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub turn: Option<Option<f64>>,
}

impl ClientMessageSpeechUpdate {
    pub fn new(r#type: Type, status: models::ClientMessageSpeechUpdateStatus, role: models::ClientMessageSpeechUpdateRole) -> ClientMessageSpeechUpdate {
        ClientMessageSpeechUpdate {
            r#type,
            status,
            role,
            turn: None,
        }
    }
}
/// This is the type of the message. \"speech-update\" is sent whenever assistant or user start or stop speaking.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "speech-update")]
    SpeechUpdate,
}

impl Default for Type {
    fn default() -> Type {
        Self::SpeechUpdate
    }
}

