/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerMessageToolCalls {
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<Box<models::ServerMessageAssistantRequestPhoneNumber>>,
    /// This is the type of the message. \"tool-calls\" is sent to call a tool.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// This is the list of tools calls that the model is requesting along with the original tool configuration.
    #[serde(rename = "toolWithToolCallList")]
    pub tool_with_tool_call_list: Vec<models::ClientMessageToolCallsToolWithToolCallListInner>,
    /// This is the ISO-8601 formatted timestamp of when the message was sent.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// This is a live version of the `call.artifact`.  This matches what is stored on `call.artifact` after the call.
    #[serde(rename = "artifact", skip_serializing_if = "Option::is_none")]
    pub artifact: Option<Box<models::Artifact>>,
    /// This is the assistant that is currently active. This is provided for convenience.  This matches one of the following: - `call.assistant`, - `call.assistantId`, - `call.squad[n].assistant`, - `call.squad[n].assistantId`, - `call.squadId->[n].assistant`, - `call.squadId->[n].assistantId`.
    #[serde(rename = "assistant", skip_serializing_if = "Option::is_none")]
    pub assistant: Option<Box<models::CreateAssistantDto>>,
    /// This is the customer associated with the call.  This matches one of the following: - `call.customer`, - `call.customerId`.
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<Box<models::CreateCustomerDto>>,
    /// This is the call object.  This matches what was returned in POST /call.  Note: This might get stale during the call. To get the latest call object, especially after the call is ended, use GET /call/:id.
    #[serde(rename = "call", skip_serializing_if = "Option::is_none")]
    pub call: Option<Box<models::Call>>,
    /// This is the list of tool calls that the model is requesting.
    #[serde(rename = "toolCallList")]
    pub tool_call_list: Vec<models::ToolCall>,
}

impl ServerMessageToolCalls {
    pub fn new(tool_with_tool_call_list: Vec<models::ClientMessageToolCallsToolWithToolCallListInner>, tool_call_list: Vec<models::ToolCall>) -> ServerMessageToolCalls {
        ServerMessageToolCalls {
            phone_number: None,
            r#type: None,
            tool_with_tool_call_list,
            timestamp: None,
            artifact: None,
            assistant: None,
            customer: None,
            call: None,
            tool_call_list,
        }
    }
}
/// This is the type of the message. \"tool-calls\" is sent to call a tool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "tool-calls")]
    ToolCalls,
}

impl Default for Type {
    fn default() -> Type {
        Self::ToolCalls
    }
}

