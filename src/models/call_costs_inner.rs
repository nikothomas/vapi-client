/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

 use serde::{Deserialize, Serialize};
 use utoipa::ToSchema;
 use models::KnowledgeBaseCost;
 use crate::models;
 
 #[derive(Clone, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
 #[serde(untagged)]
 pub enum CallCostsInner {
     TransportCost(models::TransportCost),
     TranscriberCost(models::TranscriberCost),
     ModelCost(models::ModelCost),
     VoiceCost(models::VoiceCost),
     VapiCost(models::VapiCost),
     VoicemailDetectionCost(models::VoicemailDetectionCost),
     AnalysisCost(models::AnalysisCost),
 
     // NEW: Add a KnowledgeBaseCost variant:
     KnowledgeBaseCost(models::KnowledgeBaseCost),
 }
 
 impl Default for CallCostsInner {
     fn default() -> Self {
         Self::TransportCost(Default::default())
     }
 }
 
 /// This is the type of cost, always 'transport' for this class.
 #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
 pub enum Type {
     #[serde(rename = "transport")]
     Transport,
     #[serde(rename = "transcriber")]
     Transcriber,
     #[serde(rename = "model")]
     Model,
     #[serde(rename = "voice")]
     Voice,
     #[serde(rename = "vapi")]
     Vapi,
     #[serde(rename = "voicemail-detection")]
     VoicemailDetection,
     #[serde(rename = "analysis")]
     Analysis,
 
     // NEW: Add a knowledge-base variant:
     #[serde(rename = "knowledge-base")]
     KnowledgeBase,
 }
 
 impl Default for Type {
     fn default() -> Type {
         Self::Transport
     }
 }
 
 /// This is the provider that was used to detect the voicemail.
 #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
 pub enum Provider {
     #[serde(rename = "twilio")]
     Twilio,
     #[serde(rename = "google")]
     Google,
     #[serde(rename = "openai")]
     Openai,
 }
 
 impl Default for Provider {
     fn default() -> Provider {
         Self::Twilio
     }
 }
 
 /// This is the sub type of the cost.
 #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
 pub enum SubType {
     #[serde(rename = "normal")]
     Normal,
     #[serde(rename = "overage")]
     Overage,
 }
 
 impl Default for SubType {
     fn default() -> SubType {
         Self::Normal
     }
 }
 
 /// This is the type of analysis performed.
 #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
 pub enum AnalysisType {
     #[serde(rename = "summary")]
     Summary,
     #[serde(rename = "structuredData")]
     StructuredData,
     #[serde(rename = "successEvaluation")]
     SuccessEvaluation,
 }
 
 impl Default for AnalysisType {
     fn default() -> AnalysisType {
         Self::Summary
     }
 }
 