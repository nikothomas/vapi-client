/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetPlan {
    /// This is the phone number that is being tested. During the actual test, it'll be called and the assistant attached to it will pick up and be tested. To test an assistant directly, send assistantId instead.
    #[serde(rename = "phoneNumberId", skip_serializing_if = "Option::is_none")]
    pub phone_number_id: Option<String>,
    /// This can be any phone number (even not on Vapi). During the actual test, it'll be called. To test a Vapi number, send phoneNumberId. To test an assistant directly, send assistantId instead.
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<models::TestSuitePhoneNumber>,
    /// This is the assistant being tested. During the actual test, it'll invoked directly. To test the assistant over phone number, send phoneNumberId instead.
    #[serde(rename = "assistantId", skip_serializing_if = "Option::is_none")]
    pub assistant_id: Option<String>,
    /// This is the assistant overrides applied to assistantId before it is tested.
    #[serde(rename = "assistantOverrides", skip_serializing_if = "Option::is_none")]
    pub assistant_overrides: Option<models::AssistantOverrides>,
}

impl TargetPlan {
    pub fn new() -> TargetPlan {
        TargetPlan {
            phone_number_id: None,
            phone_number: None,
            assistant_id: None,
            assistant_overrides: None,
        }
    }
}

