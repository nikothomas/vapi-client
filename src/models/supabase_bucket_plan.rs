/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupabaseBucketPlan {
    #[serde(rename = "region")]
    pub region: models::SupabaseBucketPlanRegion,
    /// This is the S3 compatible URL for Supabase S3 This should look like https://<project-ID>.supabase.co/storage/v1/s3
    #[serde(rename = "url")]
    pub url: String,
    /// This is the Supabase S3 Access Key ID. The user creates this in the Supabase project Storage settings
    #[serde(rename = "accessKeyId")]
    pub access_key_id: String,
    /// This is the Supabase S3 Secret Access Key. The user creates this in the Supabase project Storage settings along with the access key id
    #[serde(rename = "secretAccessKey")]
    pub secret_access_key: String,
    /// This is the Supabase S3 Bucket Name. The user must create this in Supabase under Storage > Buckets A bucket that does not exist will not be checked now, but file uploads will fail
    #[serde(rename = "name")]
    pub name: String,
    /// This is the Supabase S3 Bucket Folder Path. The user can create this in Supabase under Storage > Buckets A path that does not exist will not be checked now, but file uploads will fail A Path is like a folder in the bucket Eg. If the bucket is called \"my-bucket\" and the path is \"my-folder\", the full path is \"my-bucket/my-folder\"
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
}

impl SupabaseBucketPlan {
    pub fn new(region: models::SupabaseBucketPlanRegion, url: String, access_key_id: String, secret_access_key: String, name: String) -> SupabaseBucketPlan {
        SupabaseBucketPlan {
            region,
            url,
            access_key_id,
            secret_access_key,
            name,
            path: None,
        }
    }
}

