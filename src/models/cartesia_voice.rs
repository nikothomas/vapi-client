/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CartesiaVoice {
    /// The ID of the particular voice you want to use.
    #[serde(rename = "voiceId")]
    pub voice_id: String,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<models::CartesiaVoiceModel>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<models::CartesiaVoiceLanguage>,
    #[serde(rename = "experimentalControls", skip_serializing_if = "Option::is_none")]
    pub experimental_controls: Option<models::CartesiaExperimentalControls>,
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
    #[serde(rename = "fallbackPlan", skip_serializing_if = "Option::is_none")]
    pub fallback_plan: Option<models::FallbackPlan>,
}

impl CartesiaVoice {
    pub fn new(voice_id: String) -> CartesiaVoice {
        CartesiaVoice {
            voice_id,
            model: None,
            language: None,
            experimental_controls: None,
            chunk_plan: None,
            fallback_plan: None,
        }
    }
}

