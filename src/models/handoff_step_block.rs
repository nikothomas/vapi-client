/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

/// HandoffStepBlock : This is the block to use. To use an existing block, use `blockId`.
/// This is the block to use. To use an existing block, use `blockId`.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
#[serde(untagged)]
pub enum HandoffStepBlock {
    CreateConversationBlockDto(models::CreateConversationBlockDto),
    CreateToolCallBlockDto(models::CreateToolCallBlockDto),
    CreateWorkflowBlockDto(models::CreateWorkflowBlockDto),
}

impl Default for HandoffStepBlock {
    fn default() -> Self {
        Self::CreateConversationBlockDto(Default::default())
    }
}
/// This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.  For free block conversation, put clearly in the `instruction` when the block can be considered done. ``` {  \"type\": \"conversation\",  \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\" } ```  For conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`. ``` {  \"type\": \"conversation\",  \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",  \"outputSchema\": {    \"type\": \"object\",    \"properties\": {      \"hobbies\": {        \"type\": \"string\"      },      \"hopes\": {        \"type\": \"string\"      },      \"dreams\": {        \"type\": \"string\"      }    },    \"required\": [\"hobbies\"]  } } ``` For the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Type {
    #[serde(rename = "conversation")]
    Conversation,
    #[serde(rename = "tool-call")]
    ToolCall,
    #[serde(rename = "workflow")]
    Workflow,
}

impl Default for Type {
    fn default() -> Type {
        Self::Conversation
    }
}
