/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientMessageMetadata {
    /// This is the type of the message. \"metadata\" is sent to forward metadata to the client.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the metadata content
    #[serde(rename = "metadata")]
    pub metadata: String,
}

impl ClientMessageMetadata {
    pub fn new(r#type: Type, metadata: String) -> ClientMessageMetadata {
        ClientMessageMetadata {
            r#type,
            metadata,
        }
    }
}
/// This is the type of the message. \"metadata\" is sent to forward metadata to the client.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "metadata")]
    Metadata,
}

impl Default for Type {
    fn default() -> Type {
        Self::Metadata
    }
}

