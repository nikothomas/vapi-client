/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockCompleteMessage {
    /// This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.  Usage: - If your assistants are multilingual, you can provide content for each language. - If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.  This will override the `content` property.
    #[serde(rename = "contents", skip_serializing_if = "Option::is_none")]
    pub contents: Option<Vec<models::ToolMessageStartContentsInner>>,
    /// This is an optional array of conditions that must be met for this message to be triggered.
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::BlockStartMessageConditionsInner>>,
    /// This is the message type that is triggered when the block completes.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the content that the assistant will say when this message is triggered.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
}

impl BlockCompleteMessage {
    pub fn new(r#type: Type) -> BlockCompleteMessage {
        BlockCompleteMessage {
            contents: None,
            conditions: None,
            r#type,
            content: None,
        }
    }
}
/// This is the message type that is triggered when the block completes.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "block-complete")]
    BlockComplete,
}

impl Default for Type {
    fn default() -> Type {
        Self::BlockComplete
    }
}
