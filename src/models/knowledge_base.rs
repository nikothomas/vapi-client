/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KnowledgeBase {
    /// The name of the knowledge base
    #[serde(rename = "name")]
    pub name: String,
    /// The provider of the knowledge base
    #[serde(rename = "provider")]
    pub provider: Provider,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<models::KnowledgeBaseModel>,
    /// A description of the knowledge base
    #[serde(rename = "description")]
    pub description: String,
    /// The file IDs associated with this knowledge base
    #[serde(rename = "fileIds")]
    pub file_ids: Vec<String>,
}

impl KnowledgeBase {
    pub fn new(name: String, provider: Provider, description: String, file_ids: Vec<String>) -> KnowledgeBase {
        KnowledgeBase {
            name,
            provider,
            model: None,
            description,
            file_ids,
        }
    }
}
/// The provider of the knowledge base
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "google")]
    Google,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Google
    }
}

