/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
pub struct FallbackCustomVoice {
    /// This is the voice provider that will be used. Use `custom-voice` for providers that are not natively supported.
    #[serde(rename = "provider")]
    pub provider: Provider,
    /// This is where the voice request will be sent.  Request Example:  POST https://{server.url} Content-Type: application/json  {   \"message\": {     \"type\": \"voice-request\",     \"text\": \"Hello, world!\",     \"sampleRate\": 24000,     ...other metadata about the call...   } }  Response Expected: 1-channel 16-bit raw PCM audio at the sample rate specified in the request. Here is how the response will be piped to the transport: ``` response.on('data', (chunk: Buffer) => {   outputStream.write(chunk); }); ```
    #[serde(rename = "server")]
    pub server: models::Server,
    /// This is the plan for chunking the model output before it is sent to the voice provider.
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
}

impl FallbackCustomVoice {
    pub fn new(provider: Provider, server: models::Server) -> FallbackCustomVoice {
        FallbackCustomVoice {
            provider,
            server,
            chunk_plan: None,
        }
    }
}
/// This is the voice provider that will be used. Use `custom-voice` for providers that are not natively supported.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Provider {
    #[serde(rename = "custom-voice")]
    CustomVoice,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::CustomVoice
    }
}
