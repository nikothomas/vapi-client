/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
pub struct ClientInboundMessageControl {
    /// This is the type of the message. Send \"control\" message to control the assistant. `control` options are: - \"mute-assistant\" - mute the assistant - \"unmute-assistant\" - unmute the assistant - \"say-first-message\" - say the first message (this is used when video recording is enabled and the conversation is only started once the client side kicks off the recording)
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the control action
    #[serde(rename = "control")]
    pub control: Control,
}

impl ClientInboundMessageControl {
    pub fn new(r#type: Type, control: Control) -> ClientInboundMessageControl {
        ClientInboundMessageControl { r#type, control }
    }
}
/// This is the type of the message. Send \"control\" message to control the assistant. `control` options are: - \"mute-assistant\" - mute the assistant - \"unmute-assistant\" - unmute the assistant - \"say-first-message\" - say the first message (this is used when video recording is enabled and the conversation is only started once the client side kicks off the recording)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Type {
    #[serde(rename = "control")]
    Control,
}

impl Default for Type {
    fn default() -> Type {
        Self::Control
    }
}
/// This is the control action
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Control {
    #[serde(rename = "mute-assistant")]
    MuteAssistant,
    #[serde(rename = "unmute-assistant")]
    UnmuteAssistant,
    #[serde(rename = "say-first-message")]
    SayFirstMessage,
}

impl Default for Control {
    fn default() -> Control {
        Self::MuteAssistant
    }
}
