/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelCost {
    /// This is the model that was used during the call.  This matches one of the following: - `call.assistant.model`, - `call.assistantId->model`, - `call.squad[n].assistant.model`, - `call.squad[n].assistantId->model`, - `call.squadId->[n].assistant.model`, - `call.squadId->[n].assistantId->model`.
    #[serde(rename = "model")]
    pub model: std::collections::HashMap<String, serde_json::Value>,
    /// This is the number of prompt tokens used in the call. These should be total prompt tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.
    #[serde(rename = "promptTokens")]
    pub prompt_tokens: f64,
    /// This is the number of completion tokens generated in the call. These should be total completion tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.
    #[serde(rename = "completionTokens")]
    pub completion_tokens: f64,
    /// This is the cost of the component in USD.
    #[serde(rename = "cost")]
    pub cost: f64,
}

impl ModelCost {
    pub fn new(model: std::collections::HashMap<String, serde_json::Value>, prompt_tokens: f64, completion_tokens: f64, cost: f64) -> ModelCost {
        ModelCost {
            model,
            prompt_tokens,
            completion_tokens,
            cost,
        }
    }
}

