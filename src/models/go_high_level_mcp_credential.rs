/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GoHighLevelMcpCredential {
    #[serde(rename = "provider")]
    pub provider: ProviderTrue,
    /// This is the authentication session for the credential.
    #[serde(rename = "authenticationSession")]
    pub authentication_session: models::Oauth2AuthenticationSession,
    /// This is the unique identifier for the credential.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this credential belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is the ISO 8601 date-time string of when the credential was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the assistant was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// This is the name of credential. This is just for your reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl GoHighLevelMcpCredential {
    pub fn new(provider: ProviderTrue, authentication_session: models::Oauth2AuthenticationSession, id: String, org_id: String, created_at: String, updated_at: String) -> GoHighLevelMcpCredential {
        GoHighLevelMcpCredential {
            provider,
            authentication_session,
            id,
            org_id,
            created_at,
            updated_at,
            name: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProviderTrue {
    #[serde(rename = "ghl.oauth2-authorization")]
    GhlPeriodOauth2Authorization,
}

impl Default for ProviderTrue {
    fn default() -> ProviderTrue {
        Self::GhlPeriodOauth2Authorization
    }
}

