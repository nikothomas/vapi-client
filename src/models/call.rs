/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Call {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::CallType>,
    /// These are the costs of individual components of the call in USD.
    #[serde(rename = "costs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub costs: Option<Option<Vec<models::CallCostsItem>>>,
    #[serde(rename = "messages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Option<Vec<models::CallMessagesItem>>>,
    #[serde(rename = "phoneCallProvider", skip_serializing_if = "Option::is_none")]
    pub phone_call_provider: Option<models::CallPhoneCallProvider>,
    #[serde(rename = "phoneCallTransport", skip_serializing_if = "Option::is_none")]
    pub phone_call_transport: Option<models::CallPhoneCallTransport>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::CallStatus>,
    #[serde(rename = "endedReason", skip_serializing_if = "Option::is_none")]
    pub ended_reason: Option<models::CallEndedReason>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<models::CallDestination>,
    /// This is the unique identifier for the call.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this call belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is the ISO 8601 date-time string of when the call was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the call was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// This is the ISO 8601 date-time string of when the call was started.
    #[serde(rename = "startedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<Option<String>>,
    /// This is the ISO 8601 date-time string of when the call was ended.
    #[serde(rename = "endedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ended_at: Option<Option<String>>,
    /// This is the cost of the call in USD.
    #[serde(rename = "cost", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cost: Option<Option<f64>>,
    #[serde(rename = "costBreakdown", skip_serializing_if = "Option::is_none")]
    pub cost_breakdown: Option<models::CostBreakdown>,
    #[serde(rename = "artifactPlan", skip_serializing_if = "Option::is_none")]
    pub artifact_plan: Option<models::ArtifactPlan>,
    #[serde(rename = "analysis", skip_serializing_if = "Option::is_none")]
    pub analysis: Option<models::Analysis>,
    #[serde(rename = "monitor", skip_serializing_if = "Option::is_none")]
    pub monitor: Option<models::Monitor>,
    #[serde(rename = "artifact", skip_serializing_if = "Option::is_none")]
    pub artifact: Option<models::Artifact>,
    #[serde(rename = "transport", skip_serializing_if = "Option::is_none")]
    pub transport: Option<models::Transport>,
    /// The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    #[serde(rename = "phoneCallProviderId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone_call_provider_id: Option<Option<String>>,
    /// This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.
    #[serde(rename = "assistantId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assistant_id: Option<Option<String>>,
    #[serde(rename = "assistant", skip_serializing_if = "Option::is_none")]
    pub assistant: Option<models::CreateAssistantDto>,
    #[serde(rename = "assistantOverrides", skip_serializing_if = "Option::is_none")]
    pub assistant_overrides: Option<models::AssistantOverrides>,
    /// This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
    #[serde(rename = "squadId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub squad_id: Option<Option<String>>,
    #[serde(rename = "squad", skip_serializing_if = "Option::is_none")]
    pub squad: Option<models::CreateSquadDto>,
    /// This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    #[serde(rename = "phoneNumberId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone_number_id: Option<Option<String>>,
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<models::ImportTwilioPhoneNumberDto>,
    /// This is the customer that will be called. To call a transient customer , use `customer` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    #[serde(rename = "customerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<Option<String>>,
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<models::CreateCustomerDto>,
    /// This is the name of the call. This is just for your own reference.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "schedulePlan", skip_serializing_if = "Option::is_none")]
    pub schedule_plan: Option<models::SchedulePlan>,
}

impl Call {
    pub fn new(id: String, org_id: String, created_at: String, updated_at: String) -> Call {
        Call {
            r#type: None,
            costs: None,
            messages: None,
            phone_call_provider: None,
            phone_call_transport: None,
            status: None,
            ended_reason: None,
            destination: None,
            id,
            org_id,
            created_at,
            updated_at,
            started_at: None,
            ended_at: None,
            cost: None,
            cost_breakdown: None,
            artifact_plan: None,
            analysis: None,
            monitor: None,
            artifact: None,
            transport: None,
            phone_call_provider_id: None,
            assistant_id: None,
            assistant: None,
            assistant_overrides: None,
            squad_id: None,
            squad: None,
            phone_number_id: None,
            phone_number: None,
            customer_id: None,
            customer: None,
            name: None,
            schedule_plan: None,
        }
    }
}

