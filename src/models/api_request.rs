/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiRequest {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "method")]
    pub method: Method,
    /// Api endpoint to send requests to.
    #[serde(rename = "url")]
    pub url: String,
    /// These are the custom headers to include in the Api Request sent.  Each key-value pair represents a header name and its value.
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Box<models::JsonSchema>>,
    /// This defined the JSON body of your Api Request. For example, if `body_schema` included \"my_field\": \"my_gather_statement.user_age\", then the json body sent to the server would have that particular value assign to it. Right now, only data from gather statements are supported.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<Box<models::JsonSchema>>,
    /// This is the mode of the Api Request. We only support BLOCKING and BACKGROUND for now.
    #[serde(rename = "mode")]
    pub mode: Mode,
    /// This is a list of hooks for a task. Each hook is a list of tasks to run on a trigger (such as on start, on failure, etc). Only Say is supported for now.
    #[serde(rename = "hooks", skip_serializing_if = "Option::is_none")]
    pub hooks: Option<Vec<models::Hook>>,
    /// This is the schema for the outputs of the Api Request.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<Box<models::JsonSchema>>,
    #[serde(rename = "name")]
    pub name: String,
    /// This is for metadata you want to store on the task.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}

impl ApiRequest {
    pub fn new(r#type: Type, method: Method, url: String, mode: Mode, name: String) -> ApiRequest {
        ApiRequest {
            r#type,
            method,
            url,
            headers: None,
            body: None,
            mode,
            hooks: None,
            output: None,
            name,
            metadata: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "apiRequest")]
    ApiRequest,
}

impl Default for Type {
    fn default() -> Type {
        Self::ApiRequest
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Method {
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "GET")]
    Get,
}

impl Default for Method {
    fn default() -> Method {
        Self::Post
    }
}
/// This is the mode of the Api Request. We only support BLOCKING and BACKGROUND for now.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "blocking")]
    Blocking,
    #[serde(rename = "background")]
    Background,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Blocking
    }
}

