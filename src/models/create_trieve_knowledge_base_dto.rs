/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::ToSchema;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
pub struct CreateTrieveKnowledgeBaseDto {
    /// This knowledge base is provided by Trieve.  To learn more about Trieve, visit https://trieve.ai.
    #[serde(rename = "provider")]
    pub provider: Provider,
    /// This is the name of the knowledge base.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This is the searching plan used when searching for relevant chunks from the vector store.  You should configure this if you're running into these issues: - Too much unnecessary context is being fed as knowledge base context. - Not enough relevant context is being fed as knowledge base context.
    #[serde(rename = "searchPlan", skip_serializing_if = "Option::is_none")]
    pub search_plan: Option<models::TrieveKnowledgeBaseSearchPlan>,
    #[serde(rename = "createPlan", skip_serializing_if = "Option::is_none")]
    pub create_plan: Option<models::TrieveKnowledgeBaseCreatePlan>,
}

impl CreateTrieveKnowledgeBaseDto {
    pub fn new(provider: Provider) -> CreateTrieveKnowledgeBaseDto {
        CreateTrieveKnowledgeBaseDto {
            provider,
            name: None,
            search_plan: None,
            create_plan: None,
        }
    }
}
/// This knowledge base is provided by Trieve.  To learn more about Trieve, visit https://trieve.ai.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Provider {
    #[serde(rename = "trieve")]
    Trieve,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Trieve
    }
}
