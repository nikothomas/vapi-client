/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CartesiaVoiceLanguage : This is the language that will be used. This is optional and will default to the correct language for the voiceId.
/// This is the language that will be used. This is optional and will default to the correct language for the voiceId.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CartesiaVoiceLanguage {
    #[serde(rename = "en")]
    En,
    #[serde(rename = "de")]
    De,
    #[serde(rename = "es")]
    Es,
    #[serde(rename = "fr")]
    Fr,
    #[serde(rename = "ja")]
    Ja,
    #[serde(rename = "pt")]
    Pt,
    #[serde(rename = "zh")]
    Zh,
    #[serde(rename = "hi")]
    Hi,
    #[serde(rename = "it")]
    It,
    #[serde(rename = "ko")]
    Ko,
    #[serde(rename = "nl")]
    Nl,
    #[serde(rename = "pl")]
    Pl,
    #[serde(rename = "ru")]
    Ru,
    #[serde(rename = "sv")]
    Sv,
    #[serde(rename = "tr")]
    Tr,

}

impl std::fmt::Display for CartesiaVoiceLanguage {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::En => write!(f, "en"),
            Self::De => write!(f, "de"),
            Self::Es => write!(f, "es"),
            Self::Fr => write!(f, "fr"),
            Self::Ja => write!(f, "ja"),
            Self::Pt => write!(f, "pt"),
            Self::Zh => write!(f, "zh"),
            Self::Hi => write!(f, "hi"),
            Self::It => write!(f, "it"),
            Self::Ko => write!(f, "ko"),
            Self::Nl => write!(f, "nl"),
            Self::Pl => write!(f, "pl"),
            Self::Ru => write!(f, "ru"),
            Self::Sv => write!(f, "sv"),
            Self::Tr => write!(f, "tr"),
        }
    }
}

impl Default for CartesiaVoiceLanguage {
    fn default() -> CartesiaVoiceLanguage {
        Self::En
    }
}

