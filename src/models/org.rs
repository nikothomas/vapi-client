/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Org {
    /// When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false. When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively. This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.
    #[serde(rename = "hipaaEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hipaa_enabled: Option<Option<bool>>,
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<models::Subscription>,
    /// This is the ID of the subscription the org belongs to.
    #[serde(rename = "subscriptionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<Option<String>>,
    /// This is the unique identifier for the org.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the ISO 8601 date-time string of when the org was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the org was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// This is the Stripe customer for the org.
    #[serde(rename = "stripeCustomerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stripe_customer_id: Option<Option<String>>,
    /// This is the subscription for the org.
    #[serde(rename = "stripeSubscriptionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stripe_subscription_id: Option<Option<String>>,
    /// This is the subscription's subscription item.
    #[serde(rename = "stripeSubscriptionItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stripe_subscription_item_id: Option<Option<String>>,
    /// This is the subscription's current period start.
    #[serde(rename = "stripeSubscriptionCurrentPeriodStart", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stripe_subscription_current_period_start: Option<Option<String>>,
    /// This is the subscription's status.
    #[serde(rename = "stripeSubscriptionStatus", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stripe_subscription_status: Option<Option<String>>,
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<models::OrgPlan>,
    /// This is the name of the org. This is just for your own reference.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<models::OrgChannel>,
    /// This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.
    #[serde(rename = "billingLimit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing_limit: Option<Option<f64>>,
    #[serde(rename = "server", skip_serializing_if = "Option::is_none")]
    pub server: Option<models::Server>,
    /// This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.
    #[serde(rename = "concurrencyLimit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub concurrency_limit: Option<Option<f64>>,
    #[serde(rename = "compliancePlan", skip_serializing_if = "Option::is_none")]
    pub compliance_plan: Option<models::CompliancePlan>,
}

impl Org {
    pub fn new(id: String, created_at: String, updated_at: String) -> Org {
        Org {
            hipaa_enabled: None,
            subscription: None,
            subscription_id: None,
            id,
            created_at,
            updated_at,
            stripe_customer_id: None,
            stripe_subscription_id: None,
            stripe_subscription_item_id: None,
            stripe_subscription_current_period_start: None,
            stripe_subscription_status: None,
            plan: None,
            name: None,
            channel: None,
            billing_limit: None,
            server: None,
            concurrency_limit: None,
            compliance_plan: None,
        }
    }
}

