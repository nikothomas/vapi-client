/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CostBreakdown {
    /// This is the cost of the transport provider, like Twilio or Vonage.
    #[serde(rename = "transport", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transport: Option<Option<f64>>,
    /// This is the cost of the speech-to-text service.
    #[serde(rename = "stt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stt: Option<Option<f64>>,
    /// This is the cost of the language model.
    #[serde(rename = "llm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm: Option<Option<f64>>,
    /// This is the cost of the text-to-speech service.
    #[serde(rename = "tts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tts: Option<Option<f64>>,
    /// This is the cost of Vapi.
    #[serde(rename = "vapi", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vapi: Option<Option<f64>>,
    /// This is the total cost of the call.
    #[serde(rename = "total", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub total: Option<Option<f64>>,
    /// This is the LLM prompt tokens used for the call.
    #[serde(rename = "llmPromptTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm_prompt_tokens: Option<Option<f64>>,
    /// This is the LLM completion tokens used for the call.
    #[serde(rename = "llmCompletionTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm_completion_tokens: Option<Option<f64>>,
    /// This is the TTS characters used for the call.
    #[serde(rename = "ttsCharacters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tts_characters: Option<Option<f64>>,
    #[serde(rename = "analysisCostBreakdown", skip_serializing_if = "Option::is_none")]
    pub analysis_cost_breakdown: Option<models::AnalysisCostBreakdown>,
}

impl CostBreakdown {
    pub fn new() -> CostBreakdown {
        CostBreakdown {
            transport: None,
            stt: None,
            llm: None,
            tts: None,
            vapi: None,
            total: None,
            llm_prompt_tokens: None,
            llm_completion_tokens: None,
            tts_characters: None,
            analysis_cost_breakdown: None,
        }
    }
}

