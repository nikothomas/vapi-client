/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
pub struct AssistantHookFilter {
    /// This is the type of filter - currently only \"oneOf\" is supported
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the key to filter on (e.g. \"call.endedReason\")
    #[serde(rename = "key")]
    pub key: String,
    /// This is the array of possible values to match against
    #[serde(rename = "oneOf")]
    pub one_of: Vec<String>,
}

impl AssistantHookFilter {
    pub fn new(r#type: Type, key: String, one_of: Vec<String>) -> AssistantHookFilter {
        AssistantHookFilter {
            r#type,
            key,
            one_of,
        }
    }
}
/// This is the type of filter - currently only \"oneOf\" is supported
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Type {
    #[serde(rename = "oneOf")]
    OneOf,
}

impl Default for Type {
    fn default() -> Type {
        Self::OneOf
    }
}
