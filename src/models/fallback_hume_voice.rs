/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FallbackHumeVoice {
    /// This is the model that will be used.
    #[serde(rename = "model", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub model: Option<Option<Model>>,
    /// The ID of the particular voice you want to use.
    #[serde(rename = "voiceId")]
    pub voice_id: String,
    /// Indicates whether the chosen voice is a preset Hume AI voice or a custom voice.
    #[serde(rename = "isCustomHumeVoice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_custom_hume_voice: Option<Option<bool>>,
    /// Natural language instructions describing how the synthesized speech should sound, including but not limited to tone, intonation, pacing, and accent (e.g., 'a soft, gentle voice with a strong British accent').  If a Voice is specified in the request, this description serves as acting instructions. If no Voice is specified, a new voice is generated based on this description.
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
}

impl FallbackHumeVoice {
    pub fn new(voice_id: String) -> FallbackHumeVoice {
        FallbackHumeVoice {
            model: None,
            voice_id,
            is_custom_hume_voice: None,
            description: None,
            chunk_plan: None,
        }
    }
}
/// This is the model that will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Model {
    #[serde(rename = "octave")]
    Octave,
}

impl Default for Model {
    fn default() -> Model {
        Self::Octave
    }
}

