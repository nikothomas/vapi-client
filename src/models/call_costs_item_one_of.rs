/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CallCostsItemOneOf {
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<models::TransportCostProvider>,
    /// This is the minutes of `transport` usage. This should match `call.endedAt` - `call.startedAt`.
    #[serde(rename = "minutes")]
    pub minutes: f64,
    /// This is the cost of the component in USD.
    #[serde(rename = "cost")]
    pub cost: f64,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl CallCostsItemOneOf {
    pub fn new(minutes: f64, cost: f64, r#type: Type) -> CallCostsItemOneOf {
        CallCostsItemOneOf {
            provider: None,
            minutes,
            cost,
            r#type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "transport")]
    Transport,
}

impl Default for Type {
    fn default() -> Type {
        Self::Transport
    }
}

