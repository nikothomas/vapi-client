/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
pub struct ClientMessageLanguageChangeDetected {
    /// This is the type of the message. \"language-change-detected\" is sent when the transcriber is automatically switched based on the detected language.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the language the transcriber is switched to.
    #[serde(rename = "language")]
    pub language: String,
}

impl ClientMessageLanguageChangeDetected {
    pub fn new(r#type: Type, language: String) -> ClientMessageLanguageChangeDetected {
        ClientMessageLanguageChangeDetected { r#type, language }
    }
}
/// This is the type of the message. \"language-change-detected\" is sent when the transcriber is automatically switched based on the detected language.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Type {
    #[serde(rename = "language-change-detected")]
    LanguageChangeDetected,
}

impl Default for Type {
    fn default() -> Type {
        Self::LanguageChangeDetected
    }
}
