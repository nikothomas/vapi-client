/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GoogleVoicemailDetectionPlan {
    /// This is the maximum duration from the start of the call that we will wait for a voicemail beep, before speaking our message  - If we detect a voicemail beep before this, we will speak the message at that point.  - Setting too low a value means that the bot will start speaking its voicemail message too early. If it does so before the actual beep, it will get cut off. You should definitely tune this to your use case.  @default 30 @min 0 @max 60
    #[serde(
        rename = "beepMaxAwaitSeconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub beep_max_await_seconds: Option<f64>,
    /// This is the provider to use for voicemail detection.
    #[serde(rename = "provider")]
    pub provider: ProviderTrue,
    /// This is the backoff plan for the voicemail detection.
    #[serde(rename = "backoffPlan", skip_serializing_if = "Option::is_none")]
    pub backoff_plan: Option<models::VoicemailDetectionBackoffPlan>,
}

impl GoogleVoicemailDetectionPlan {
    pub fn new(provider: ProviderTrue) -> GoogleVoicemailDetectionPlan {
        GoogleVoicemailDetectionPlan {
            beep_max_await_seconds: None,
            provider,
            backoff_plan: None,
        }
    }
}
/// This is the provider to use for voicemail detection.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProviderTrue {
    #[serde(rename = "google")]
    Google,
}

impl Default for ProviderTrue {
    fn default() -> ProviderTrue {
        Self::Google
    }
}
