/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::ToSchema;


use crate::models;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
#[serde(untagged)]
pub enum BlockStartMessageConditionsInner {
    ModelBasedCondition(models::ModelBasedCondition),
    RuleBasedCondition(models::RuleBasedCondition),
}

impl Default for BlockStartMessageConditionsInner {
    fn default() -> Self {
        Self::ModelBasedCondition(Default::default())
    }
}
/// This condition is based on a model.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Type {
    #[serde(rename = "model-based")]
    ModelBased,
    #[serde(rename = "rule-based")]
    RuleBased,
}

impl Default for Type {
    fn default() -> Type {
        Self::ModelBased
    }
}
/// This is the operator you want to use to compare the left side and right side.  The operation becomes `(leftSide) operator (rightSide)`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Operator {
    #[serde(rename = "eq")]
    Eq,
    #[serde(rename = "neq")]
    Neq,
    #[serde(rename = "gt")]
    Gt,
    #[serde(rename = "gte")]
    Gte,
    #[serde(rename = "lt")]
    Lt,
    #[serde(rename = "lte")]
    Lte,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::Eq
    }
}
