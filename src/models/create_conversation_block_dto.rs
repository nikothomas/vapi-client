/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::ToSchema;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
pub struct CreateConversationBlockDto {
    /// These are the pre-configured messages that will be spoken to the user while the block is running.
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<models::ConversationBlockMessagesInner>>,
    /// This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`  These are accessible as variables: - ({{input.propertyName}}) in context of the block execution (step) - ({{stepName.input.propertyName}}) in context of the workflow
    #[serde(rename = "inputSchema", skip_serializing_if = "Option::is_none")]
    pub input_schema: Option<models::JsonSchema>,
    /// This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).  These are accessible as variables: - ({{output.propertyName}}) in context of the block execution (step) - ({{stepName.output.propertyName}}) in context of the workflow (read caveat #1) - ({{blockName.output.propertyName}}) in context of the workflow (read caveat #2)  Caveats: 1. a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output.propertyName}} will reference the latest usage of the step. 2. a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.
    #[serde(rename = "outputSchema", skip_serializing_if = "Option::is_none")]
    pub output_schema: Option<models::JsonSchema>,
    /// This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.  For free block conversation, put clearly in the `instruction` when the block can be considered done. ``` {  \"type\": \"conversation\",  \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\" } ```  For conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`. ``` {  \"type\": \"conversation\",  \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",  \"outputSchema\": {    \"type\": \"object\",    \"properties\": {      \"hobbies\": {        \"type\": \"string\"      },      \"hopes\": {        \"type\": \"string\"      },      \"dreams\": {        \"type\": \"string\"      }    },    \"required\": [\"hobbies\"]  } } ``` For the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).
    #[serde(rename = "type")]
    pub r#type: Type,
    /// This is the instruction to the model.  You can reference any variable in the context of the current block execution (step): - \"{{input.your-property-name}}\" for the current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow; read caveat #1) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow; read caveat #1) - \"{{your-block-name.output.your-property-name}}\" for another block's output (in the same workflow; read caveat #2) - \"{{your-block-name.input.your-property-name}}\" for another block's input (in the same workflow; read caveat #2) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  This can be as simple or as complex as you want it to be. - \"say hello and ask the user about their day!\" - \"collect the user's first and last name\" - \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"  Caveats: 1. a workflow can execute a step multiple times. example, if a loop is used in the graph. {{stepName.output/input.propertyName}} will reference the latest usage of the step. 2. a workflow can execute a block multiple times. example, if a step is called multiple times or if a block is used in multiple steps. {{blockName.output/input.propertyName}} will reference the latest usage of the block. this liquid variable is just provided for convenience when creating blocks outside of a workflow with steps.
    #[serde(rename = "instruction")]
    pub instruction: String,
    /// This is the name of the block. This is just for your reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl CreateConversationBlockDto {
    pub fn new(r#type: Type, instruction: String) -> CreateConversationBlockDto {
        CreateConversationBlockDto {
            messages: None,
            input_schema: None,
            output_schema: None,
            r#type,
            instruction,
            name: None,
        }
    }
}
/// This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.  For free block conversation, put clearly in the `instruction` when the block can be considered done. ``` {  \"type\": \"conversation\",  \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\" } ```  For conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`. ``` {  \"type\": \"conversation\",  \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",  \"outputSchema\": {    \"type\": \"object\",    \"properties\": {      \"hobbies\": {        \"type\": \"string\"      },      \"hopes\": {        \"type\": \"string\"      },      \"dreams\": {        \"type\": \"string\"      }    },    \"required\": [\"hobbies\"]  } } ``` For the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum Type {
    #[serde(rename = "conversation")]
    Conversation,
}

impl Default for Type {
    fn default() -> Type {
        Self::Conversation
    }
}
