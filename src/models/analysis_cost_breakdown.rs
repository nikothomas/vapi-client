/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalysisCostBreakdown {
    /// This is the cost to summarize the call.
    #[serde(rename = "summary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Option<f64>>,
    /// This is the number of prompt tokens used to summarize the call.
    #[serde(rename = "summaryPromptTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary_prompt_tokens: Option<Option<f64>>,
    /// This is the number of completion tokens used to summarize the call.
    #[serde(rename = "summaryCompletionTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary_completion_tokens: Option<Option<f64>>,
    /// This is the cost to extract structured data from the call.
    #[serde(rename = "structuredData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub structured_data: Option<Option<f64>>,
    /// This is the number of prompt tokens used to extract structured data from the call.
    #[serde(rename = "structuredDataPromptTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub structured_data_prompt_tokens: Option<Option<f64>>,
    /// This is the number of completion tokens used to extract structured data from the call.
    #[serde(rename = "structuredDataCompletionTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub structured_data_completion_tokens: Option<Option<f64>>,
    /// This is the cost to evaluate if the call was successful.
    #[serde(rename = "successEvaluation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub success_evaluation: Option<Option<f64>>,
    /// This is the number of prompt tokens used to evaluate if the call was successful.
    #[serde(rename = "successEvaluationPromptTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub success_evaluation_prompt_tokens: Option<Option<f64>>,
    /// This is the number of completion tokens used to evaluate if the call was successful.
    #[serde(rename = "successEvaluationCompletionTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub success_evaluation_completion_tokens: Option<Option<f64>>,
}

impl AnalysisCostBreakdown {
    pub fn new() -> AnalysisCostBreakdown {
        AnalysisCostBreakdown {
            summary: None,
            summary_prompt_tokens: None,
            summary_completion_tokens: None,
            structured_data: None,
            structured_data_prompt_tokens: None,
            structured_data_completion_tokens: None,
            success_evaluation: None,
            success_evaluation_prompt_tokens: None,
            success_evaluation_completion_tokens: None,
        }
    }
}

