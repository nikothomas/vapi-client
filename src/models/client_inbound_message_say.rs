/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientInboundMessageSay {
    /// This is the content to say.
    #[serde(rename = "content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub content: Option<Option<String>>,
    /// This is the flag to end call after content is spoken.
    #[serde(rename = "endCallAfterSpoken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_call_after_spoken: Option<Option<bool>>,
    /// This is the flag for whether the message is interruptible.
    #[serde(rename = "interruptionsEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub interruptions_enabled: Option<Option<bool>>,
}

impl ClientInboundMessageSay {
    pub fn new() -> ClientInboundMessageSay {
        ClientInboundMessageSay {
            content: None,
            end_call_after_spoken: None,
            interruptions_enabled: None,
        }
    }
}

