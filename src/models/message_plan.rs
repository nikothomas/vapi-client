/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessagePlan {
    /// This are the messages that the assistant will speak when the user hasn't responded for `idleTimeoutSeconds`. Each time the timeout is triggered, a random message will be chosen from this array.  Usage: - If user gets distracted and doesn't respond for a while, this can be used to grab their attention. - If the transcriber doesn't pick up what the user said, this can be used to ask the user to repeat themselves. (From the perspective of the assistant, the conversation is idle since it didn't \"hear\" any user messages.)  @default null (no idle message is spoken)
    #[serde(rename = "idleMessages", skip_serializing_if = "Option::is_none")]
    pub idle_messages: Option<Vec<String>>,
    /// This determines the maximum number of times `idleMessages` can be spoken during the call.  @default 3
    #[serde(rename = "idleMessageMaxSpokenCount", skip_serializing_if = "Option::is_none")]
    pub idle_message_max_spoken_count: Option<f64>,
    /// This determines whether the idle message count is reset whenever the user speaks.  @default false
    #[serde(rename = "idleMessageResetCountOnUserSpeechEnabled", skip_serializing_if = "Option::is_none")]
    pub idle_message_reset_count_on_user_speech_enabled: Option<bool>,
    /// This is the timeout in seconds before a message from `idleMessages` is spoken. The clock starts when the assistant finishes speaking and remains active until the user speaks.  @default 10
    #[serde(rename = "idleTimeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub idle_timeout_seconds: Option<f64>,
    /// This is the message that the assistant will say if the call ends due to silence.  If unspecified, it will hang up without saying anything.
    #[serde(rename = "silenceTimeoutMessage", skip_serializing_if = "Option::is_none")]
    pub silence_timeout_message: Option<String>,
}

impl MessagePlan {
    pub fn new() -> MessagePlan {
        MessagePlan {
            idle_messages: None,
            idle_message_max_spoken_count: None,
            idle_message_reset_count_on_user_speech_enabled: None,
            idle_timeout_seconds: None,
            silence_timeout_message: None,
        }
    }
}

