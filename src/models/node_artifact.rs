/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeArtifact {
    /// This is the node id.
    #[serde(rename = "nodeName", skip_serializing_if = "Option::is_none")]
    pub node_name: Option<String>,
    /// This is the messages that were spoken during the node.
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<serde_json::Value>>,
    /// This is the object containing the variables extracted from the node.
    #[serde(rename = "variables", skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}

impl NodeArtifact {
    pub fn new() -> NodeArtifact {
        NodeArtifact {
            node_name: None,
            messages: None,
            variables: None,
        }
    }
}

