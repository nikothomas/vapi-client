/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Assistant {
    #[serde(rename = "transcriber", skip_serializing_if = "Option::is_none")]
    pub transcriber: Option<models::AssistantTranscriber>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<models::AssistantModel>,
    #[serde(rename = "voice", skip_serializing_if = "Option::is_none")]
    pub voice: Option<models::AssistantVoice>,
    /// This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).  If unspecified, assistant will wait for user to speak and use the model to respond once they speak.
    #[serde(rename = "firstMessage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_message: Option<Option<String>>,
    #[serde(rename = "firstMessageInterruptionsEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_message_interruptions_enabled: Option<Option<bool>>,
    #[serde(rename = "firstMessageMode", skip_serializing_if = "Option::is_none")]
    pub first_message_mode: Option<models::AssistantFirstMessageMode>,
    #[serde(rename = "voicemailDetection", skip_serializing_if = "Option::is_none")]
    pub voicemail_detection: Option<models::AssistantVoicemailDetection>,
    /// These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transfer-update,transcript,tool-calls,user-interrupted,voice-input,workflow.node.started. You can check the shape of the messages in ClientMessage schema.
    #[serde(rename = "clientMessages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_messages: Option<Option<Vec<models::AssistantClientMessagesItem>>>,
    /// These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.
    #[serde(rename = "serverMessages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub server_messages: Option<Option<Vec<models::AssistantServerMessagesItem>>>,
    /// How many seconds of silence to wait before ending the call. Defaults to 30.  @default 30
    #[serde(rename = "silenceTimeoutSeconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub silence_timeout_seconds: Option<Option<f64>>,
    /// This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.  @default 600 (10 minutes)
    #[serde(rename = "maxDurationSeconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_duration_seconds: Option<Option<f64>>,
    #[serde(rename = "backgroundSound", skip_serializing_if = "Option::is_none")]
    pub background_sound: Option<models::AssistantBackgroundSound>,
    /// This enables filtering of noise and background speech while the user is talking.  Default `false` while in beta.  @default false
    #[serde(rename = "backgroundDenoisingEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub background_denoising_enabled: Option<Option<bool>>,
    /// This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.  Default `false` while in beta.  @default false
    #[serde(rename = "modelOutputInMessagesEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub model_output_in_messages_enabled: Option<Option<bool>>,
    /// These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.
    #[serde(rename = "transportConfigurations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transport_configurations: Option<Option<Vec<models::TransportConfigurationTwilio>>>,
    #[serde(rename = "observabilityPlan", skip_serializing_if = "Option::is_none")]
    pub observability_plan: Option<models::LangfuseObservabilityPlan>,
    /// These are dynamic credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.
    #[serde(rename = "credentials", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Option<Vec<models::AssistantCredentialsItem>>>,
    /// This is the name of the assistant.  This is required when you want to transfer between assistants in a call.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// This is the message that the assistant will say if the call is forwarded to voicemail.  If unspecified, it will hang up.
    #[serde(rename = "voicemailMessage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub voicemail_message: Option<Option<String>>,
    /// This is the message that the assistant will say if it ends the call.  If unspecified, it will hang up without saying anything.
    #[serde(rename = "endCallMessage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_call_message: Option<Option<String>>,
    /// This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.
    #[serde(rename = "endCallPhrases", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_call_phrases: Option<Option<Vec<String>>>,
    #[serde(rename = "compliancePlan", skip_serializing_if = "Option::is_none")]
    pub compliance_plan: Option<models::CompliancePlan>,
    /// This is for metadata you want to store on the assistant.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "analysisPlan", skip_serializing_if = "Option::is_none")]
    pub analysis_plan: Option<models::AnalysisPlan>,
    #[serde(rename = "artifactPlan", skip_serializing_if = "Option::is_none")]
    pub artifact_plan: Option<models::ArtifactPlan>,
    #[serde(rename = "messagePlan", skip_serializing_if = "Option::is_none")]
    pub message_plan: Option<models::MessagePlan>,
    #[serde(rename = "startSpeakingPlan", skip_serializing_if = "Option::is_none")]
    pub start_speaking_plan: Option<models::StartSpeakingPlan>,
    #[serde(rename = "stopSpeakingPlan", skip_serializing_if = "Option::is_none")]
    pub stop_speaking_plan: Option<models::StopSpeakingPlan>,
    #[serde(rename = "monitorPlan", skip_serializing_if = "Option::is_none")]
    pub monitor_plan: Option<models::MonitorPlan>,
    /// These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.
    #[serde(rename = "credentialIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub credential_ids: Option<Option<Vec<String>>>,
    #[serde(rename = "server", skip_serializing_if = "Option::is_none")]
    pub server: Option<models::Server>,
    /// This is a set of actions that will be performed on certain events.
    #[serde(rename = "hooks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hooks: Option<Option<Vec<models::AssistantHooks>>>,
    #[serde(rename = "keypadInputPlan", skip_serializing_if = "Option::is_none")]
    pub keypad_input_plan: Option<models::KeypadInputPlan>,
    /// This is the unique identifier for the assistant.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this assistant belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is the ISO 8601 date-time string of when the assistant was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the assistant was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl Assistant {
    pub fn new(id: String, org_id: String, created_at: String, updated_at: String) -> Assistant {
        Assistant {
            transcriber: None,
            model: None,
            voice: None,
            first_message: None,
            first_message_interruptions_enabled: None,
            first_message_mode: None,
            voicemail_detection: None,
            client_messages: None,
            server_messages: None,
            silence_timeout_seconds: None,
            max_duration_seconds: None,
            background_sound: None,
            background_denoising_enabled: None,
            model_output_in_messages_enabled: None,
            transport_configurations: None,
            observability_plan: None,
            credentials: None,
            name: None,
            voicemail_message: None,
            end_call_message: None,
            end_call_phrases: None,
            compliance_plan: None,
            metadata: None,
            analysis_plan: None,
            artifact_plan: None,
            message_plan: None,
            start_speaking_plan: None,
            stop_speaking_plan: None,
            monitor_plan: None,
            credential_ids: None,
            server: None,
            hooks: None,
            keypad_input_plan: None,
            id,
            org_id,
            created_at,
            updated_at,
        }
    }
}

