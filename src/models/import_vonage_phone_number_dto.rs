/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportVonagePhoneNumberDto {
    #[serde(
        rename = "fallbackDestination",
        skip_serializing_if = "Option::is_none"
    )]
    pub fallback_destination: Option<models::ImportTwilioPhoneNumberDtoFallbackDestination>,
    /// These are the digits of the phone number you own on your Vonage.
    #[serde(rename = "vonagePhoneNumber")]
    pub vonage_phone_number: String,
    /// This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up.  You can add the Vonage Credential in the Provider Credentials page on the dashboard to get the credentialId.
    #[serde(rename = "credentialId")]
    pub credential_id: String,
    /// This is the name of the phone number. This is just for your own reference.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This is the assistant that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.
    #[serde(rename = "assistantId", skip_serializing_if = "Option::is_none")]
    pub assistant_id: Option<String>,
    /// This is the squad that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.
    #[serde(rename = "squadId", skip_serializing_if = "Option::is_none")]
    pub squad_id: Option<String>,
    /// This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.  The order of precedence is:  1. assistant.server 2. phoneNumber.server 3. org.server
    #[serde(rename = "server", skip_serializing_if = "Option::is_none")]
    pub server: Option<models::Server>,
}

impl ImportVonagePhoneNumberDto {
    pub fn new(vonage_phone_number: String, credential_id: String) -> ImportVonagePhoneNumberDto {
        ImportVonagePhoneNumberDto {
            fallback_destination: None,
            vonage_phone_number,
            credential_id,
            name: None,
            assistant_id: None,
            squad_id: None,
            server: None,
        }
    }
}
