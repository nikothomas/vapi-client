/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuite {
    /// This is the unique identifier for the test suite.
    #[serde(rename = "id")]
    pub id: String,
    /// This is the unique identifier for the org that this test suite belongs to.
    #[serde(rename = "orgId")]
    pub org_id: String,
    /// This is the ISO 8601 date-time string of when the test suite was created.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// This is the ISO 8601 date-time string of when the test suite was last updated.
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// This is the name of the test suite.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This is the phone number ID associated with this test suite.
    #[serde(rename = "phoneNumberId", skip_serializing_if = "Option::is_none")]
    pub phone_number_id: Option<String>,
}

impl TestSuite {
    pub fn new(id: String, org_id: String, created_at: String, updated_at: String) -> TestSuite {
        TestSuite {
            id,
            org_id,
            created_at,
            updated_at,
            name: None,
            phone_number_id: None,
        }
    }
}
