/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StructuredDataPlan {
    /// These are the messages used to generate the structured data.  @default: ``` [   {     \"role\": \"system\",     \"content\": \"You are an expert data extractor. You will be given a transcript of a call. Extract structured data per the JSON Schema. DO NOT return anything except the structured data.\\n\\nJson Schema:\\\\n{{schema}}\\n\\nOnly respond with the JSON.\"   },   {     \"role\": \"user\",     \"content\": \"Here is the transcript:\\n\\n{{transcript}}\\n\\n\"   } ]```  You can customize by providing any messages you want.  Here are the template variables available: - {{transcript}}: the transcript of the call from `call.artifact.transcript`- {{systemPrompt}}: the system prompt of the call from `assistant.model.messages[type=system].content`- {{schema}}: the schema of the structured data from `structuredDataPlan.schema`
    #[serde(rename = "messages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Option<Vec<std::collections::HashMap<String, serde_json::Value>>>>,
    /// This determines whether structured data is generated and stored in `call.analysis.structuredData`. Defaults to false.  Usage: - If you want to extract structured data, set this to true and provide a `schema`.  @default false
    #[serde(rename = "enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<Option<bool>>,
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<models::JsonSchema>,
    /// This is how long the request is tried before giving up. When request times out, `call.analysis.structuredData` will be empty.  Usage: - To guarantee the structured data is generated, set this value high. Note, this will delay the end of call report in cases where model is slow to respond.  @default 5 seconds
    #[serde(rename = "timeoutSeconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<Option<f64>>,
}

impl StructuredDataPlan {
    pub fn new() -> StructuredDataPlan {
        StructuredDataPlan {
            messages: None,
            enabled: None,
            schema: None,
            timeout_seconds: None,
        }
    }
}

