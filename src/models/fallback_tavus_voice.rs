/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FallbackTavusVoice {
    #[serde(rename = "voiceId")]
    pub voice_id: models::FallbackTavusVoiceVoiceId,
    /// This is the unique identifier for the persona that the replica will use in the conversation.
    #[serde(rename = "personaId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub persona_id: Option<Option<String>>,
    /// This is the url that will receive webhooks with updates regarding the conversation state.
    #[serde(rename = "callbackUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub callback_url: Option<Option<String>>,
    /// This is the name for the conversation.
    #[serde(rename = "conversationName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conversation_name: Option<Option<String>>,
    /// This is the context that will be appended to any context provided in the persona, if one is provided.
    #[serde(rename = "conversationalContext", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conversational_context: Option<Option<String>>,
    /// This is the custom greeting that the replica will give once a participant joines the conversation.
    #[serde(rename = "customGreeting", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_greeting: Option<Option<String>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<models::TavusConversationProperties>,
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
}

impl FallbackTavusVoice {
    pub fn new(voice_id: models::FallbackTavusVoiceVoiceId) -> FallbackTavusVoice {
        FallbackTavusVoice {
            voice_id,
            persona_id: None,
            callback_url: None,
            conversation_name: None,
            conversational_context: None,
            custom_greeting: None,
            properties: None,
            chunk_plan: None,
        }
    }
}

