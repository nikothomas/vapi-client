/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::OpenApi;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, OpenApi)]
pub struct FallbackTavusVoice {
    /// This is the voice provider that will be used.
    #[serde(rename = "provider")]
    pub provider: Provider,
    #[serde(rename = "voiceId")]
    pub voice_id: models::TavusVoiceVoiceId,
    /// This is the unique identifier for the persona that the replica will use in the conversation.
    #[serde(rename = "personaId", skip_serializing_if = "Option::is_none")]
    pub persona_id: Option<String>,
    /// This is the url that will receive webhooks with updates regarding the conversation state.
    #[serde(rename = "callbackUrl", skip_serializing_if = "Option::is_none")]
    pub callback_url: Option<String>,
    /// This is the name for the conversation.
    #[serde(rename = "conversationName", skip_serializing_if = "Option::is_none")]
    pub conversation_name: Option<String>,
    /// This is the context that will be appended to any context provided in the persona, if one is provided.
    #[serde(
        rename = "conversationalContext",
        skip_serializing_if = "Option::is_none"
    )]
    pub conversational_context: Option<String>,
    /// This is the custom greeting that the replica will give once a participant joines the conversation.
    #[serde(rename = "customGreeting", skip_serializing_if = "Option::is_none")]
    pub custom_greeting: Option<String>,
    /// These are optional properties used to customize the conversation.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<models::TavusConversationProperties>,
    /// This is the plan for chunking the model output before it is sent to the voice provider.
    #[serde(rename = "chunkPlan", skip_serializing_if = "Option::is_none")]
    pub chunk_plan: Option<models::ChunkPlan>,
}

impl FallbackTavusVoice {
    pub fn new(provider: Provider, voice_id: models::TavusVoiceVoiceId) -> FallbackTavusVoice {
        FallbackTavusVoice {
            provider,
            voice_id,
            persona_id: None,
            callback_url: None,
            conversation_name: None,
            conversational_context: None,
            custom_greeting: None,
            properties: None,
            chunk_plan: None,
        }
    }
}
/// This is the voice provider that will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, OpenApi)]
pub enum Provider {
    #[serde(rename = "tavus")]
    Tavus,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Tavus
    }
}
