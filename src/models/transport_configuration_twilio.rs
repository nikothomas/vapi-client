/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportConfigurationTwilio {
    #[serde(rename = "provider")]
    pub provider: Provider,
    /// The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.  @default 60
    #[serde(rename = "timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<Option<f64>>,
    /// Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`.  @default false
    #[serde(rename = "record", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub record: Option<Option<bool>>,
    #[serde(rename = "recordingChannels", skip_serializing_if = "Option::is_none")]
    pub recording_channels: Option<models::TransportConfigurationTwilioRecordingChannels>,
}

impl TransportConfigurationTwilio {
    pub fn new(provider: Provider) -> TransportConfigurationTwilio {
        TransportConfigurationTwilio {
            provider,
            timeout: None,
            record: None,
            recording_channels: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "twilio")]
    Twilio,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Twilio
    }
}

