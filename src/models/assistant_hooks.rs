/*
 * Vapi API
 *
 * API for building voice assistants
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use utoipa::ToSchema;


use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, ToSchema)]
pub struct AssistantHooks {
    /// This is the event that triggers this hook
    #[serde(rename = "on")]
    pub on: On,
    /// This is the set of filters that must match for the hook to trigger
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::AssistantHookFilter>>,
    /// This is the set of actions to perform when the hook triggers
    #[serde(rename = "do")]
    pub r#do: Vec<serde_json::Value>,
}

impl AssistantHooks {
    pub fn new(on: On, r#do: Vec<serde_json::Value>) -> AssistantHooks {
        AssistantHooks {
            on,
            filters: None,
            r#do,
        }
    }
}
/// This is the event that triggers this hook
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, ToSchema)]
pub enum On {
    #[serde(rename = "call.ending")]
    CallPeriodEnding,
}

impl Default for On {
    fn default() -> On {
        Self::CallPeriodEnding
    }
}
