/*
 * Vapi API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalyticsQuery {
    #[serde(rename = "table")]
    pub table: models::AnalyticsQueryTable,
    /// This is the list of columns you want to group by.
    #[serde(rename = "groupBy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub group_by: Option<Option<Vec<models::AnalyticsQueryGroupByItem>>>,
    /// This is the name of the query. This will be used to identify the query in the response.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "timeRange", skip_serializing_if = "Option::is_none")]
    pub time_range: Option<models::TimeRange>,
    /// This is the list of operations you want to perform.
    #[serde(rename = "operations")]
    pub operations: Vec<models::AnalyticsOperation>,
}

impl AnalyticsQuery {
    pub fn new(table: models::AnalyticsQueryTable, name: String, operations: Vec<models::AnalyticsOperation>) -> AnalyticsQuery {
        AnalyticsQuery {
            table,
            group_by: None,
            name,
            time_range: None,
            operations,
        }
    }
}

