/*
 * Vapi API
 *
 * Voice AI for developers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateAssistantDtoVoice : These are the options for the assistant's voice.
/// These are the options for the assistant's voice.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAssistantDtoVoice {
    AzureVoice(models::AzureVoice),
    CartesiaVoice(models::CartesiaVoice),
    CustomVoice(models::CustomVoice),
    DeepgramVoice(models::DeepgramVoice),
    ElevenLabsVoice(models::ElevenLabsVoice),
    HumeVoice(models::HumeVoice),
    LmntVoice(models::LmntVoice),
    NeuphonicVoice(models::NeuphonicVoice),
    OpenAiVoice(models::OpenAiVoice),
    PlayHtVoice(models::PlayHtVoice),
    RimeAiVoice(models::RimeAiVoice),
    SmallestAiVoice(models::SmallestAiVoice),
    TavusVoice(models::TavusVoice),
    VapiVoice(models::VapiVoice),
}

impl Default for CreateAssistantDtoVoice {
    fn default() -> Self {
        Self::AzureVoice(Default::default())
    }
}
/// This is the voice provider that will be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "vapi")]
    Vapi,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Vapi
    }
}
/// The voices provided by Vapi
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoiceId {
    #[serde(rename = "Elliot")]
    Elliot,
    #[serde(rename = "Rohan")]
    Rohan,
    #[serde(rename = "Lily")]
    Lily,
    #[serde(rename = "Savannah")]
    Savannah,
    #[serde(rename = "Hana")]
    Hana,
    #[serde(rename = "Neha")]
    Neha,
    #[serde(rename = "Cole")]
    Cole,
    #[serde(rename = "Harry")]
    Harry,
    #[serde(rename = "Paige")]
    Paige,
    #[serde(rename = "Spencer")]
    Spencer,
}

impl Default for VoiceId {
    fn default() -> VoiceId {
        Self::Elliot
    }
}
/// Smallest AI voice model to use. Defaults to 'lightning' when not specified.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Model {
    #[serde(rename = "lightning")]
    Lightning,
}

impl Default for Model {
    fn default() -> Model {
        Self::Lightning
    }
}
/// This is the language code (ISO 639-1) that will be used.  @default 'en-US'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "en-US")]
    EnUs,
    #[serde(rename = "en-GB")]
    EnGb,
    #[serde(rename = "en-AU")]
    EnAu,
    #[serde(rename = "en-CA")]
    EnCa,
    #[serde(rename = "ja")]
    Ja,
    #[serde(rename = "zh")]
    Zh,
    #[serde(rename = "de")]
    De,
    #[serde(rename = "hi")]
    Hi,
    #[serde(rename = "fr-FR")]
    FrFr,
    #[serde(rename = "fr-CA")]
    FrCa,
    #[serde(rename = "ko")]
    Ko,
    #[serde(rename = "pt-BR")]
    PtBr,
    #[serde(rename = "pt-PT")]
    PtPt,
    #[serde(rename = "it")]
    It,
    #[serde(rename = "es-ES")]
    EsEs,
    #[serde(rename = "es-MX")]
    EsMx,
    #[serde(rename = "id")]
    Id,
    #[serde(rename = "nl")]
    Nl,
    #[serde(rename = "tr")]
    Tr,
    #[serde(rename = "fil")]
    Fil,
    #[serde(rename = "pl")]
    Pl,
    #[serde(rename = "sv")]
    Sv,
    #[serde(rename = "bg")]
    Bg,
    #[serde(rename = "ro")]
    Ro,
    #[serde(rename = "ar-SA")]
    ArSa,
    #[serde(rename = "ar-AE")]
    ArAe,
    #[serde(rename = "cs")]
    Cs,
    #[serde(rename = "el")]
    El,
    #[serde(rename = "fi")]
    Fi,
    #[serde(rename = "hr")]
    Hr,
    #[serde(rename = "ms")]
    Ms,
    #[serde(rename = "sk")]
    Sk,
    #[serde(rename = "da")]
    Da,
    #[serde(rename = "ta")]
    Ta,
    #[serde(rename = "uk")]
    Uk,
    #[serde(rename = "ru")]
    Ru,
    #[serde(rename = "hu")]
    Hu,
    #[serde(rename = "no")]
    No,
    #[serde(rename = "vi")]
    Vi,
}

impl Default for Language {
    fn default() -> Language {
        Self::EnUs
    }
}
/// An emotion to be applied to the speech.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Emotion {
    #[serde(rename = "female_happy")]
    FemaleHappy,
    #[serde(rename = "female_sad")]
    FemaleSad,
    #[serde(rename = "female_angry")]
    FemaleAngry,
    #[serde(rename = "female_fearful")]
    FemaleFearful,
    #[serde(rename = "female_disgust")]
    FemaleDisgust,
    #[serde(rename = "female_surprised")]
    FemaleSurprised,
    #[serde(rename = "male_happy")]
    MaleHappy,
    #[serde(rename = "male_sad")]
    MaleSad,
    #[serde(rename = "male_angry")]
    MaleAngry,
    #[serde(rename = "male_fearful")]
    MaleFearful,
    #[serde(rename = "male_disgust")]
    MaleDisgust,
    #[serde(rename = "male_surprised")]
    MaleSurprised,
}

impl Default for Emotion {
    fn default() -> Emotion {
        Self::FemaleHappy
    }
}

